{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/lunr/lunr.js","webpack:///./node_modules/regenerator-runtime/runtime-module.js","webpack:///./node_modules/regenerator-runtime/runtime.js"],"names":["module","exports","__webpack_require__","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","fn","self","this","args","arguments","apply","err","undefined","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","message","console","asString","obj","toString","clone","Object","create","keys","i","length","val","Array","isArray","slice","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","prototype","Set","elements","complete","intersect","other","union","contains","empty","object","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","x","Math","log","abs","Token","str","metadata","update","tokenizer","map","t","toLowerCase","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","index","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","noEditNode","char","deletionNode","frame","pop","substitutionNode","insertionNode","transposeNode","charA","charB","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","m","termTokenSet","expandedTerms","presence","REQUIRED","field","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","results","matches","isNegated","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","fieldBoost","docBoost","scoreWithPrecision","tf","round","createTokenSet","use","unshift","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","oldRuntime","e","Op","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","wrap","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","reverse","Context","skipTempReset","prev","sent","_sent","delegate","method","tryEntries","resetTryEntry","stop","rootRecord","completion","rval","dispatchException","exception","context","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","abrupt","finallyEntry","afterLoc","catch","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","doneResult","delegateResult","maybeInvokeDelegate","tryCatch","makeInvokeMethod","previousPromise","callInvokeWithMethodAndArg","invoke","unwrapped","return","pushTryEntry","locs","iteratorMethod"],"mappings":"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,GACAuM,KAAAT,KACAD,EAAAC,QAEK,GAAAI,EAAAK,KAAAV,GAAA,CAELC,GADAW,EAAAP,EAAAQ,KAAAb,IACA,GAAAY,EAAA,IACAP,EAAAlM,GACAuM,KAAAT,KACAD,EAAAC,GA8BA,OAzBAG,EAAAjL,GACAuL,KAAAV,KAEAC,GADAW,EAAAR,EAAAS,KAAAb,IACA,GAEAK,EAAAjM,EACAkM,EAAAjL,IAFA+K,EAAAjM,GAGAuM,KAAAT,IAAAI,EAAAK,KAAAT,KAAAK,EAAAI,KAAAT,MACAD,EAAAC,IAKAI,EAAAlM,GADAiM,EAAAhL,GAEAsL,KAAAV,IAAAK,EAAAK,KAAAV,KACAI,EAAA1L,EACAsL,IAAAW,QAAAP,EAAA,KAKA,KAAAD,IACAH,EAAAG,EAAAnG,cAAAgG,EAAAQ,OAAA,IAGAR,GAGA,SAAA5D,GACA,OAAAA,EAAAxC,OAAAtE,KAIAC,EAAAoF,SAAAG,iBAAAvF,EAAAQ,QAAA;;;;IAmBAR,EAAAuL,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,OAAA,SAAAlF,EAAAmF,GAEA,OADAnF,EAAAmF,KACAnF,GACG,IAEH,gBAAAK,GACA,GAAAA,GAAA4E,EAAA5E,EAAA1F,cAAA0F,EAAA1F,WAAA,OAAA0F,IAiBA7G,EAAAO,eAAAP,EAAAuL,uBAAA,CACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OAC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","file":"vendors~reference.bundle.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.5\n * Copyright (C) 2018 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.5\"\n/*!\n * lunr.utils\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === void 0 || result === '') continue\n\n      if (Array.isArray(result)) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2018 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      }\n\n      stack.push({\n        node: noEditNode,\n        editsRemaining: frame.editsRemaining,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.complete\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2018 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n"],"sourceRoot":""}
[
  {
    "entries": [
      {
        "name": "b",
        "description": null,
        "returns": null,
        "category": "global",
        "subcategory": null,
        "parameters": [],
        "kind": "class",
        "tags": [
          {
            "name": "b",
            "title": "class",
            "description": null,
            "type": null
          },
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b"
      },
      {
        "name": "VERSION",
        "description": "The basil version",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.VERSION"
      },
      {
        "name": "RGB",
        "description": "Used with b.colorMode() to set the color space.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.RGB"
      },
      {
        "name": "CMYK",
        "description": "Used with b.colorMode() to set the color space.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CMYK"
      },
      {
        "name": "LINEAR",
        "description": "Used with b.gradientMode() to set the gradient mode.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.LINEAR"
      },
      {
        "name": "RADIAL",
        "description": "Used with b.gradientMode() to set the gradient mode.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.RADIAL"
      },
      {
        "name": "LOREM",
        "description": "Returns a Lorem ipsum string that can be used for testing.",
        "returns": null,
        "category": "Typography",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.LOREM"
      },
      {
        "name": "width",
        "description": "System variable which stores the width of the current page.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.width"
      },
      {
        "name": "height",
        "description": "System variable which stores the height of the current page.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.height"
      },
      {
        "name": "go",
        "description": "Run the sketch! Has to be called in every sketch a the very end of the code.\nYou may add performance setting options when calling b.go():",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "modes",
            "description": "Optional: Switch performanceMode",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.go([modes])"
      },
      {
        "name": "loop",
        "description": "EXPERIMENTAL!",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "framerate",
            "description": "The framerate per second, determines how often draw() is called per second.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.loop(framerate)"
      },
      {
        "name": "noLoop",
        "description": "EXPERIMENTAL!",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.noLoop()"
      },
      {
        "name": "delay",
        "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "milliseconds",
            "description": "The delay time in milliseconds.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.delay(milliseconds)"
      },
      {
        "name": "clear",
        "description": "Removes all PageItems (including locked ones) in the given Document, Page, Layer or Group. If the selected container is a Group, the Group itself will be removed as well.",
        "returns": null,
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "container",
            "description": "The container where the PageItems sit in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Removes all PageItems (including locked ones) in the given Document, Page, Layer or Group. If the selected container is a Group, the Group itself will be removed as well."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.clear(container)"
      },
      {
        "name": "remove",
        "description": "Removes the provided Page, Layer, PageItem, Swatch, etc.",
        "returns": null,
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The object to be removed.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Removes the provided Page, Layer, PageItem, Swatch, etc."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.remove(obj)"
      },
      {
        "name": "doc",
        "description": "Sets or possibly creates the current document and returns it.\nIf the param doc is not given the current document gets set to the active document\nin the application. If no document at all is open, a new document gets created.",
        "returns": {
          "name": null,
          "description": "The current document instance.",
          "type": [
            "Document"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "doc",
            "description": "The document to set the current document to.",
            "optional": true,
            "type": [
              "Document"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.doc([doc])"
      },
      {
        "name": "size",
        "description": "Sets the size of the current document, if arguments are given.\nIf only one argument is given, both the width and the height are set to this value.\nIf no argument is given, an object containing the current document's width and height is returned.",
        "returns": {
          "name": null,
          "description": "if no argument is given it returns an object containing the current width and height of the document.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "width",
            "description": "The desired width of the current document.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "height",
            "description": "Optional the desired height of the current document. If not provided the width will be used as the height.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.size(width, [height])"
      },
      {
        "name": "close",
        "description": "Closes the current document.",
        "returns": null,
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "saveOptions",
            "description": "Optional, the Indesign SaveOptions constant or either true for triggering saving before closing or false for closing without saving.",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "file",
            "description": "Optional, the indesign file instance to save the document to.",
            "optional": true,
            "type": [
              "File"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.close([saveOptions], [file])"
      },
      {
        "name": "Group",
        "description": "Returns the Group instance and sets it if argument Group is given.",
        "returns": {
          "name": null,
          "description": "The current Group instance.",
          "type": [
            "Group"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "pItem",
            "description": "Optional, the PageItems array (must be at least 2) or name of Group name instance.",
            "optional": true,
            "type": [
              "Array"
            ]
          },
          {
            "name": "name",
            "description": "Optional, the name of the Group, only when creating a Group from Page Item(s).",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "subCat",
            "description": "Page"
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Group([pItem], name)"
      },
      {
        "name": "Group",
        "description": "Returns an array of the items that were within the Group before b.ungroup() was called",
        "returns": {
          "name": null,
          "description": "The Page Item(s) that were grouped.",
          "type": [
            "Group"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "pItem",
            "description": "The Group or name of Group name instance.",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "name",
            "description": "The name of the Group, only when creating a Group from Page Item(s).",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "subCat",
            "description": "Page"
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Group([pItem], name)"
      },
      {
        "name": "guideX",
        "description": "Creates a vertical guide line at the current spread and current layer.",
        "returns": {
          "name": null,
          "description": "New guide line.",
          "type": [
            "Guide"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "x",
            "description": "Position of the new guide line.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.guideX(x)"
      },
      {
        "name": "guideY",
        "description": "Creates a horizontal guide line at the current spread and current layer.",
        "returns": {
          "name": null,
          "description": "New guide line.",
          "type": [
            "Guide"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "y",
            "description": "Position of the new guide line.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.guideY(y)"
      },
      {
        "name": "inspect",
        "description": "Prints out all properties and values off an object in a recursive manner to the console. Useful for inspecting (or debugging) nested variable. the default value for the recursion is maxlevel = 2.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The Object to be inspected.",
            "optional": false,
            "type": [
              "Object"
            ]
          },
          {
            "name": "maxlevel",
            "description": "Optional, recursion limit, default maxlevel = 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.inspect(obj, maxlevel)"
      },
      {
        "name": "print",
        "description": "Prints a message to the console output in the ExtendScript editor, but unlike b.println() it doesn't return the carriage to a new line at the end.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "msg",
            "description": "The message to print",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.print(msg)"
      },
      {
        "name": "printInfo",
        "description": "Print numerous information about the current environment to the console",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.printInfo()"
      },
      {
        "name": "saveStrings",
        "description": "Writes an array of strings to a file, one line per string.\nIf the given file exists it gets overridden.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "strings",
            "description": "The string array to be written",
            "optional": false,
            "type": []
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.saveStrings(file, strings)"
      },
      {
        "name": "saveString",
        "description": "Writes a string to a file.\nIf the given file exists it gets overridden.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "string",
            "description": "The string to be written",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.saveString(file, string)"
      },
      {
        "name": "savePDF",
        "description": "Exports the current document as PDF to the documents folder. Please note, that export options default to the last used export settings.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "showOptions",
            "description": "Whether to show the export dialog",
            "optional": true,
            "type": [
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.savePDF(file, [showOptions])"
      },
      {
        "name": "savePNG",
        "description": "Exports the current document as PNG (or sequence of PNG files) to the documents folder. Please note, that export options default to the last used export settings.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "showOptions",
            "description": "Whether to show the export dialog",
            "optional": true,
            "type": [
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.savePNG(file, [showOptions])"
      },
      {
        "name": "download",
        "description": "Downloads an URL to a file, currently Mac only.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "url",
            "description": "The download url",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "file",
            "description": "A relative file path in the project folder or a File instance",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.download(url, [file])"
      },
      {
        "name": "objectStyle",
        "description": "Returns the object style of a given page item or the object style with the given name. If an\nobject style of the given name does not exist, it gets created. Optionally a props object of\nproperty name/value pairs can be used to set the object style's properties.",
        "returns": {
          "name": null,
          "description": "The object style instance.",
          "type": [
            "ObjectStyle"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "itemOrName",
            "description": "A page item whose style to return or the name of the object style to return.",
            "optional": false,
            "type": [
              "PageItem",
              "String"
            ]
          },
          {
            "name": "props",
            "description": "An object of property name/value pairs to set the style's properties.",
            "optional": true,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.objectStyle(itemOrName, [props])"
      },
      {
        "name": "applyObjectStyle",
        "description": "Applies an object style to the given page item. The object style can be given as\nname or as an object style instance.",
        "returns": {
          "name": null,
          "description": "The page item that the style was applied to.",
          "type": [
            "PageItem"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "item",
            "description": "The page item to apply the style to.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "style",
            "description": "An object style instance or the name of the object style to apply.",
            "optional": false,
            "type": [
              "ObjectStyle",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.applyObjectStyle(item, style)"
      },
      {
        "name": "fill",
        "description": "Sets the color or gradient used to fill shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "fillColor",
            "description": "Accepts a color/gradient/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
            "optional": false,
            "type": [
              "Color",
              "Gradient",
              "Swatch",
              "Numbers"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.fill(fillColor)"
      },
      {
        "name": "noFill",
        "description": "Disables filling geometry. If both noStroke() and noFill() are called,\nnewly drawn shapes will be invisible.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.noFill()"
      },
      {
        "name": "stroke",
        "description": "Sets the color or gradient used to draw lines and borders around shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "strokeColor",
            "description": "Accepts a color/gradient/swatch or a string with the name of a color. Or values: C,M,Y,K / R,G,B / Grey",
            "optional": false,
            "type": [
              "Color",
              "Gradient",
              "Swatch",
              "Numbers"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.stroke(strokeColor)"
      },
      {
        "name": "noStroke",
        "description": "Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.noStroke()"
      },
      {
        "name": "fillTint",
        "description": "Sets the tint of the color used to fill shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "tint",
            "description": "Number from 0 to 100",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.fillTint(tint)"
      },
      {
        "name": "strokeTint",
        "description": "Sets the tint of the color used to draw lines and borders around shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "tint",
            "description": "Number from 0 to 100",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.strokeTint(tint)"
      },
      {
        "name": "colorMode",
        "description": "Sets the colormode for creating new colors with b.color() to RGB or CMYK. The default color mode is RBG.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "colorMode",
            "description": "Either b.RGB or b.CMYK",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.colorMode(colorMode)"
      },
      {
        "name": "gradientMode",
        "description": "Sets the gradient mode for creating new gradients with b.gradient() to LINEAR or RADIAL. The default gradient mode is LINEAR.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "gradientMode",
            "description": "Either b.LINEAR or b.RADIAL",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.gradientMode(gradientMode)"
      },
      {
        "name": "color",
        "description": "Creates a new RGB or CMYK color and adds the new color to the document, or gets a color by name from the document. The default color mode is RGB.",
        "returns": {
          "name": null,
          "description": "found or new color",
          "type": [
            "Color"
          ]
        },
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "Get",
            "description": "color: the color name. Create new color: R,G,B,[name] or C,M,Y,K,[name] or Grey,name. Name is always optional",
            "optional": false,
            "type": [
              "String",
              "Numbers"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.color(Get)"
      },
      {
        "name": "gradient",
        "description": "Creates a new gradient and adds it to the document, or gets a gradient by name from the document.\nIf two colors are given as the first two parameters, a gradient is created that blends between these two colors. If an array of colors is used\nas the first parameter, a gradient with the contained colors will be created. The colors will be distributed evenly. If additionally to this array\na second array of gradient stop positions is given, the colors will be positioned at the given gradient stops. Possible gradient stop positions\nrange from 0 to 100. All parameter options allow for an additional name parameter at the end to name the new gradient.\nIf a string is used as the only parameter, the gradient with that name will be returned, if it exists in the document.",
        "returns": {
          "name": null,
          "description": "Found or new gradient",
          "type": [
            "Gradient"
          ]
        },
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "c1",
            "description": "First color of the gradient. Alternatively: Array of colors/gradients or name of gradient to get.",
            "optional": false,
            "type": [
              "Color",
              "Array",
              "String"
            ]
          },
          {
            "name": "c2",
            "description": "Second color of the gradient. Alternatively: Array of gradient stop positions (if first parameter is an array of colors).",
            "optional": false,
            "type": [
              "Color",
              "Array",
              "String"
            ]
          },
          {
            "name": "name",
            "description": "Optional name of the gradient.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.gradient(c1, c2, [name])"
      },
      {
        "name": "opacity",
        "description": "Sets the opacity property of an object.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The object to set opacity property",
            "optional": false,
            "type": [
              "Object"
            ]
          },
          {
            "name": "opacity",
            "description": "The opacity value form 0 to 100",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.opacity(obj, opacity)"
      },
      {
        "name": "blendMode",
        "description": "Sets the Effects blendMode property of an object.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The object to set blendMode property",
            "optional": false,
            "type": [
              "Object"
            ]
          },
          {
            "name": "blendMode",
            "description": "The blendMode must be one of the InDesign BlendMode enum values:\n                          BlendMode.NORMAL <br />\n                          BlendMode.MULTIPLY <br />\n                          BlendMode.SCREEN <br />\n                          BlendMode.OVERLAY <br />\n                          BlendMode.SOFT_LIGHT <br />\n                          BlendMode.HARD_LIGHT <br />\n                          BlendMode.COLOR_DODGE <br />\n                          BlendMode.COLOR_BURN <br />\n                          BlendMode.DARKEN <br />\n                          BlendMode.LIGHTEN <br />\n                          BlendMode.DIFFERENCE <br />\n                          BlendMode.EXCLUSION <br />\n                          BlendMode.HUE <br />\n                          BlendMode.SATURATION <br />\n                          BlendMode.COLOR <br />\n                          BlendMode.LUMINOSITY <br />",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.blendMode(obj, blendMode)"
      },
      {
        "name": "lerpColor",
        "description": "Calculates a color or colors between two color at a specific increment.\nThe amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc.\nN.B.: Both color must be either CMYK or RGB.",
        "returns": {
          "name": null,
          "description": "Interpolated color",
          "type": [
            "Color"
          ]
        },
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "c1",
            "description": "Input color 1",
            "optional": false,
            "type": [
              "Color"
            ]
          },
          {
            "name": "c2",
            "description": "Input color 2",
            "optional": false,
            "type": [
              "Color"
            ]
          },
          {
            "name": "amt",
            "description": "The Amount to interpolate between the two colors",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.lerpColor(c1, c2, amt)"
      },
      {
        "name": "text",
        "description": "Creates a text frame on the current layer on the current page in the current document.\nThe text frame gets created in the position specified by the x and y parameters.\nThe default document font will be used unless a font is set with the textFont() function.\nThe default document font size will be used unless a font size is set with the textSize() function.\nChange the color of the text with the fill() function.\nThe text displays in relation to the textAlign() and textYAlign() functions.\nThe width and height parameters define a rectangular area.",
        "returns": {
          "name": null,
          "description": "The created text frame instance",
          "type": [
            "TextFrame"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "txt",
            "description": "The text content to set in the text frame.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "x",
            "description": "x-coordinate of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "y-coordinate of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "width of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "height of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.text(txt, x, y, w, h)"
      },
      {
        "name": "typo",
        "description": "Sets text properties to the given item. If the item is not an instance the text property can be set to,\nthe property gets set to the direct descendants of the given item, e.g. all stories of a given document.",
        "returns": {
          "name": null,
          "description": "The property value(s) if the function acts as getter or the items the property\n                                      was assigned to.",
          "type": [
            null,
            null,
            null
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "item",
            "description": "The object to apply the property to.",
            "optional": false,
            "type": [
              "Document",
              "Spread",
              "Page",
              "Layer",
              "Story",
              "TextFrame",
              "Text"
            ]
          },
          {
            "name": "property",
            "description": "The text property name or an object of key/value property/value pairs.\n                                  If property is a string and no value is given, the function acts as getter.",
            "optional": false,
            "type": [
              "String",
              "Object"
            ]
          },
          {
            "name": "value",
            "description": "The value to apply to the property.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.typo(item, property, [value])"
      },
      {
        "name": "textFont",
        "description": "Returns the current font and sets it if argument fontName is given.",
        "returns": {
          "name": null,
          "description": "currFont The name of the current font",
          "type": [
            "String"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "fontName",
            "description": "The name of the font to set e.g. Helvetica",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "fontStyle",
            "description": "The Font style e.g. Bold",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.textFont(fontName, [fontStyle])"
      },
      {
        "name": "textSize",
        "description": "Returns the current font size in points and sets it if argument pointSize is given.",
        "returns": {
          "name": null,
          "description": "The current point size.",
          "type": [
            "Number"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "pointSize",
            "description": "The size in points to set.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.textSize([pointSize])"
      },
      {
        "name": "textAlign",
        "description": "Sets the current horizontal and vertical text alignment.",
        "returns": null,
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "align",
            "description": "The horizontal text alignment to set. Must be one of the InDesign Justification enum values:\n                          Justification.AWAY_FROM_BINDING_SIDE <br />\n                          Justification.CENTER_ALIGN <br />\n                          Justification.CENTER_JUSTIFIED <br />\n                          Justification.FULLY_JUSTIFIED <br />\n                          Justification.LEFT_ALIGN <br />\n                          Justification.RIGHT_ALIGN <br />\n                          Justification.RIGHT_JUSTIFIED <br />\n                          Justification.TO_BINDING_SIDE <br />",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "yAlign",
            "description": "The vertical text alignment to set. Must be one of the InDesign VerticalJustification enum values:\n                          VerticalJustification.BOTTOM_ALIGN <br />\n                          VerticalJustification.CENTER_ALIGN <br />\n                          VerticalJustification.JUSTIFY_ALIGN <br />\n                          VerticalJustification.TOP_ALIGN <br />",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.textAlign(align, [yAlign])"
      },
      {
        "name": "textLeading",
        "description": "Returns the spacing between lines of text in units of points and sets it if argument leading is given.",
        "returns": {
          "name": null,
          "description": "The current leading.",
          "type": [
            "Number",
            "String"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "leading",
            "description": "The spacing between lines of text in units of points or the default Indesign enum\n                                  value Leading.AUTO.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.textLeading([leading])"
      },
      {
        "name": "textKerning",
        "description": "Returns the current kerning and sets it if argument kerning is given.",
        "returns": {
          "name": null,
          "description": "The current kerning.",
          "type": [
            "Number"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "kerning",
            "description": "The value to set.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.textKerning([kerning])"
      },
      {
        "name": "textTracking",
        "description": "Returns the current tracking and sets it if argument tracking is given.",
        "returns": {
          "name": null,
          "description": "The current tracking.",
          "type": [
            "Number"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "tracking",
            "description": "The value to set.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.textTracking([tracking])"
      },
      {
        "name": "characterStyle",
        "description": "Returns the character style of a given text object or the character style with the given name. If a\ncharacter style of the given name does not exist, it gets created. Optionally a props object of\nproperty name/value pairs can be used to set the character style's properties.",
        "returns": {
          "name": null,
          "description": "The character style instance.",
          "type": [
            "CharacterStyle"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "textOrName",
            "description": "A text object whose style to return or the name of the character style to return.",
            "optional": false,
            "type": [
              "Text",
              "String"
            ]
          },
          {
            "name": "props",
            "description": "Optional: An object of property name/value pairs to set the style's properties.",
            "optional": true,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.characterStyle(textOrName, [props])"
      },
      {
        "name": "applyCharacterStyle",
        "description": "Applies a character style to the given text object, text frame or story. The character style\ncan be given as name or as character style instance.",
        "returns": {
          "name": null,
          "description": "The text that the style was applied to.",
          "type": [
            "Text"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "text",
            "description": "The text frame, text object or story to apply the style to.",
            "optional": false,
            "type": [
              "TextFrame",
              "TextObject",
              "Story"
            ]
          },
          {
            "name": "style",
            "description": "A character style instance or the name of the character style to apply.",
            "optional": false,
            "type": [
              "CharacterStyle",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.applyCharacterStyle(text, style)"
      },
      {
        "name": "paragraphStyle",
        "description": "Returns the paragraph style of a given text object or the paragraph style with the given name. If a\nparagraph style of the given name does not exist, it gets created. Optionally a props object of\nproperty name/value pairs can be used to set the paragraph style's properties.",
        "returns": {
          "name": null,
          "description": "The paragraph style instance.",
          "type": [
            "ParagraphStyle"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "textOrName",
            "description": "A text object whose style to return or the name of the paragraph style to return.",
            "optional": false,
            "type": [
              "Text",
              "String"
            ]
          },
          {
            "name": "props",
            "description": "Optional: An object of property name/value pairs to set the style's properties.",
            "optional": true,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.paragraphStyle(textOrName, [props])"
      },
      {
        "name": "applyParagraphStyle",
        "description": "Applies a paragraph style to the given text object, text frame or story. The paragraph style\ncan be given as name or as paragraph style instance.",
        "returns": {
          "name": null,
          "description": "The text that the style was applied to.",
          "type": [
            "Text"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "text",
            "description": "The text frame, text object or story to apply the style to.",
            "optional": false,
            "type": [
              "TextFrame",
              "TextObject",
              "Story"
            ]
          },
          {
            "name": "style",
            "description": "A paragraph style instance or the name of the paragraph style to apply.",
            "optional": false,
            "type": [
              "ParagraphStyle",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.applyParagraphStyle(text, style)"
      },
      {
        "name": "linkTextFrames",
        "description": "Links the stories of two textframes to one story. Text of first textframe overflows to second one.",
        "returns": null,
        "category": "Story",
        "subcategory": null,
        "parameters": [
          {
            "name": "textFrameA",
            "description": null,
            "optional": false,
            "type": [
              "TextFrame"
            ]
          },
          {
            "name": "textFrameB",
            "description": null,
            "optional": false,
            "type": [
              "TextFrame"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.linkTextFrames(textFrameA, textFrameB)"
      },
      {
        "name": "placeholder",
        "description": "Fills the given textFrame and all linked textFrame with random placeholder text. The placeholder text will be added at the end of any already existing text in the text frame.",
        "returns": {
          "name": null,
          "description": "The inserted placeholder text.",
          "type": [
            "Text"
          ]
        },
        "category": "Story",
        "subcategory": null,
        "parameters": [
          {
            "name": "textFrame",
            "description": null,
            "optional": false,
            "type": [
              "TextFrame"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.placeholder(textFrame)"
      },
      {
        "name": "Random.nextGaussian",
        "description": null,
        "returns": {
          "name": null,
          "description": "The next Gaussian random value.",
          "type": [
            "Number"
          ]
        },
        "category": "global",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Random.nextGaussian()"
      },
      {
        "name": "units",
        "description": "Sets the units of the document (like right clicking the rulers). The default units of basil.js are PT.",
        "returns": {
          "name": null,
          "description": "Current unit setting.",
          "type": [
            "String"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "units",
            "description": "Optional, supported units: PT, PX, CM, MM or IN.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.units([units])"
      },
      {
        "name": "println",
        "description": "Prints a message line to the console output in the ExtendScript editor.",
        "returns": null,
        "category": "Output",
        "subcategory": null,
        "parameters": [
          {
            "name": "msg",
            "description": "The message to print",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.println(msg)"
      }
    ],
    "subcat": "null"
  },
  {
    "entries": [
      {
        "name": "PT",
        "description": "Used with b.units() to set the coordinate system to points.",
        "returns": null,
        "category": "Document",
        "subcategory": "Units",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.PT"
      },
      {
        "name": "PX",
        "description": "Used with b.units() to set the coordinate system to pixels.",
        "returns": null,
        "category": "Document",
        "subcategory": "Units",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.PX"
      },
      {
        "name": "CM",
        "description": "Used with b.units() to set the coordinate system to centimeters.",
        "returns": null,
        "category": "Document",
        "subcategory": "Units",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CM"
      },
      {
        "name": "MM",
        "description": "Used with b.units() to set the coordinate system to millimeters.",
        "returns": null,
        "category": "Document",
        "subcategory": "Units",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.MM"
      },
      {
        "name": "IN",
        "description": "Used with b.units() to set the coordinate system to inches.",
        "returns": null,
        "category": "Document",
        "subcategory": "Units",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.IN"
      }
    ],
    "subcat": "Units"
  },
  {
    "entries": [
      {
        "name": "CORNER",
        "description": "Corner, used for drawing modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CORNER"
      },
      {
        "name": "CORNERS",
        "description": "Corners, used for drawing modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CORNERS"
      },
      {
        "name": "CENTER",
        "description": "Center, used for drawing modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CENTER"
      },
      {
        "name": "RADIUS",
        "description": "Radius, used for drawing modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.RADIUS"
      },
      {
        "name": "CLOSE",
        "description": "Close, used for endShape() modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CLOSE"
      },
      {
        "name": "OPEN",
        "description": "Open, used for arc() modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.OPEN"
      },
      {
        "name": "CHORD",
        "description": "Chord, used for arc() modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CHORD"
      },
      {
        "name": "PIE",
        "description": "Pie, used for arc() modes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.PIE"
      },
      {
        "name": "ellipse",
        "description": "Draws an ellipse (oval) in the display window. An ellipse with an equal width and height is a circle.\nThe first two parameters set the location, the third sets the width, and the fourth sets the height.",
        "returns": {
          "name": null,
          "description": "New Oval (in InDesign Scripting terms the corresponding type is Oval, not Ellipse).",
          "type": [
            "Oval"
          ]
        },
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "Width of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "Height of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.ellipse(x, y, w, h)"
      },
      {
        "name": "line",
        "description": "Draws a line (a direct path between two points) to the page.",
        "returns": {
          "name": null,
          "description": "New GraphicLine.",
          "type": [
            "GraphicLine"
          ]
        },
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x1",
            "description": "X-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y1",
            "description": "Y-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x2",
            "description": "X-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y2",
            "description": "Y-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.line(x1, y1, x2, y2)"
      },
      {
        "name": "beginShape",
        "description": "Using the beginShape() and endShape() functions allows to create more complex forms.\nbeginShape() begins recording vertices for a shape and endShape() stops recording.\nAfter calling the beginShape() function, a series of vertex() commands must follow.\nTo stop drawing the shape, call endShape(). The shapeMode parameter allows to close the shape\n(to connect the beginning and the end).",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "shapeMode",
            "description": "Set to b.CLOSE if the new Path should be auto-closed.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.beginShape(shapeMode)"
      },
      {
        "name": "vertex",
        "description": "Shapes are constructed by connecting a series of vertices. vertex() is used to\nspecify the vertex coordinates of lines and polygons. It is used exclusively between\nthe beginShape() and endShape() functions.",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the vertex.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the vertex.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "xAnchorLeft",
            "description": "X-coordinate of the left-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "yAnchorLeft",
            "description": "Y-coordinate of the left-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "xAnchorRight",
            "description": "X-coordinate of the right-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "yAnchorRight",
            "description": "Y-coordinate of the right-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.vertex(x, y, [xAnchorLeft], [yAnchorLeft], [xAnchorRight], [yAnchorRight])"
      },
      {
        "name": "arc",
        "description": "The arc() function draws an arc. Arcs are drawn along the outer edge of an ellipse\ndefined by the x, y, width and height parameters.\nThe origin or the arc's ellipse may be changed with the ellipseMode() function.\nThe start and stop parameters specify the angles at which to draw the arc.",
        "returns": {
          "name": null,
          "description": "The resulting GraphicLine or Polygon object (in InDesign Scripting terms the corresponding type is GraphicLine or Polygon, not Arc).\n\nTODO(S)\n- fix overlapping points bug",
          "type": [
            "GraphicLine",
            "Polygon"
          ]
        },
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "cx",
            "description": "X-coordinate of the arc's center.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "cy",
            "description": "Y-coordinate of the arc's center.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "Width of the arc's ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "Height of the arc's ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "startAngle",
            "description": "Starting angle of the arc in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "endAngle",
            "description": "Ending angle of the arc in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "mode",
            "description": "Mode to define the rendering technique of the arc: b.OPEN (default), b.CHORD, or b.PIE.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.arc(cx, cy, w, h, startAngle, endAngle, [mode])"
      },
      {
        "name": "addPath",
        "description": "addPath() is used to create multi component paths. Call addPath() to add\nthe vertices drawn so far to a single path. New vertices will then end up in a new path and\nendShape() will return a multi path object. All component paths will account for\nthe setting (see b.CLOSE) given in beginShape(shapeMode).",
        "returns": null,
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.addPath()"
      },
      {
        "name": "endShape",
        "description": "The endShape() function is the companion to beginShape() and may only be called\nafter beginShape().",
        "returns": {
          "name": null,
          "description": "The GraphicLine or Polygon object that was created.",
          "type": [
            "GraphicLine",
            "Polygon"
          ]
        },
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.endShape()"
      },
      {
        "name": "rect",
        "description": "Draws a rectangle on the page.",
        "returns": {
          "name": null,
          "description": "The rectangle that was created.",
          "type": [
            "Rectangle"
          ]
        },
        "category": "Document",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "Width of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "Height of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.rect(x, y, w, h)"
      }
    ],
    "subcat": "Primitives"
  },
  {
    "entries": [
      {
        "name": "TWO_PI",
        "description": "Two Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.TWO_PI"
      },
      {
        "name": "PI",
        "description": "Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.PI"
      },
      {
        "name": "HALF_PI",
        "description": "Half Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HALF_PI"
      },
      {
        "name": "QUARTER_PI",
        "description": "Quarter Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.QUARTER_PI"
      },
      {
        "name": "SINCOS_LENGTH",
        "description": "Sin Cos Length",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.SINCOS_LENGTH"
      },
      {
        "name": "EPSILON",
        "description": "Epsilon",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.EPSILON"
      },
      {
        "name": "KAPPA",
        "description": "Kappa",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.KAPPA"
      }
    ],
    "subcat": "Constants"
  },
  {
    "entries": [
      {
        "name": "PAGE",
        "description": "Used with b.canvasMode() to set the canvas to the full current page.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.PAGE"
      },
      {
        "name": "MARGIN",
        "description": "Used with b.canvasMode() to set the canvas to the full current page minus the margins.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.MARGIN"
      },
      {
        "name": "BLEED",
        "description": "Used with b.canvasMode() to set the canvas to the full current page plus the bleed.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.BLEED"
      },
      {
        "name": "FACING_PAGES",
        "description": "Used with b.canvasMode() to set the canvas to use the current facing pages.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.FACING_PAGES"
      },
      {
        "name": "FACING_BLEEDS",
        "description": "Used with b.canvasMode() to set the canvas to use the current facing pages plus bleeds.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.FACING_BLEEDS"
      },
      {
        "name": "FACING_MARGINS",
        "description": "Used with b.canvasMode() to set the canvas to use the current facing pages minus margins.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.FACING_MARGINS"
      },
      {
        "name": "AT_BEGINNING",
        "description": "Used with b.addPage() to set the position of the new page in the book.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.AT_BEGINNING"
      },
      {
        "name": "AT_END",
        "description": "Used with b.addPage() to set the position of the new page in the book.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.AT_END"
      },
      {
        "name": "BEFORE",
        "description": "Used with b.addPage() to set the position of the new page in the book.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.BEFORE"
      },
      {
        "name": "AFTER",
        "description": "Used with b.addPage() to set the position of the new page in the book.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.AFTER"
      },
      {
        "name": "canvasMode",
        "description": "Use this to set the dimensions of the canvas. Choose between b.PAGE (default), b.MARGIN, b.BLEED resp. b.FACING_PAGES, b.FACING_MARGINS and b.FACING_BLEEDS for book setups with facing page. Please note: Setups with more than two facing pages are not yet supported.\nPlease note that you will loose your current MatrixTransformation. You should set the canvasMode before you attempt to use b.translate(), b.rotate() and b.scale();",
        "returns": {
          "name": null,
          "description": "The current canvas mode.",
          "type": [
            "String"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "mode",
            "description": "The canvas mode to set.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.canvasMode(mode)"
      },
      {
        "name": "pasteboard",
        "description": "Returns the current horizontal and vertical pasteboard margins and sets them if both arguements are given.",
        "returns": {
          "name": null,
          "description": "The current horizontal, vertical pasteboard margins.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "h",
            "description": "The desired horizontal pasteboard margin.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "v",
            "description": "The desired vertical pasteboard margin.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.pasteboard(h, v)"
      },
      {
        "name": "page",
        "description": "Returns the current page and sets it if argument page is given. Numbering starts with 1.",
        "returns": {
          "name": null,
          "description": "The current page instance.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "page",
            "description": "The page object or page number to set the current page to. If you pass a PageItem the current page will be set to it's containing page.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.page([page])"
      },
      {
        "name": "addPage",
        "description": "Adds a new page to the document. Set the optional location parameter to either b.AT_END (default), b.AT_BEGINNING, b.AFTER or b.BEFORE. b.AFTER and b.BEFORE will use the current page as insertion point.",
        "returns": {
          "name": null,
          "description": "The new page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "location",
            "description": "The location placement mode.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.addPage([location])"
      },
      {
        "name": "removePage",
        "description": "Removes a page from the current document. This will either be the current Page if the parameter page is left empty, or the given Page object or page number.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "page",
            "description": "Optional, the page to be removed as Page object or page number.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.removePage([page])"
      },
      {
        "name": "pageNumber",
        "description": "Returns the current page number of either the current page or the given Page object.",
        "returns": {
          "name": null,
          "description": "The page number within the document.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "pageObj",
            "description": "Optional, the page you want to know the number of.",
            "optional": true,
            "type": [
              "Page"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.pageNumber([pageObj])"
      },
      {
        "name": "nextPage",
        "description": "Set the next page of the document to be the active one. Returns new active page.",
        "returns": {
          "name": null,
          "description": "The active page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.nextPage()"
      },
      {
        "name": "previousPage",
        "description": "Set the previous page of the document to be the active one. Returns new active page.",
        "returns": {
          "name": null,
          "description": "The active page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.previousPage()"
      },
      {
        "name": "pageCount",
        "description": "The number of all pages in the current document.",
        "returns": {
          "name": null,
          "description": "The amount of pages.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.pageCount()"
      },
      {
        "name": "layer",
        "description": "Returns the current layer if no argument is given. Sets active layer if layer object or name of existing layer is given. Newly creates layer and sets it to active if new name is given.",
        "returns": {
          "name": null,
          "description": "The current layer instance.",
          "type": [
            "Layer"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "layer",
            "description": "Optional, the layer or layer name to set the current layer to.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.layer([layer])"
      },
      {
        "name": "margins",
        "description": "Sets the margins of a given page. If 1 value is given, all 4 sides are set equally. If 4 values are given, the current page will be adjusted. Adding a 5th value will set the margin of a given page. Calling the function without any values, will return the margins for the current page.",
        "returns": {
          "name": null,
          "description": "Current page margins with the properties: top, right, bottom, left.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "top",
            "description": "Optional, top margin or all if only one.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "right",
            "description": "Optional, right margin.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "bottom",
            "description": "Optional, bottom margin.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "left",
            "description": "Optional, left margin.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "pageNumber",
            "description": "Optional, sets margins to selected page, currentPage() if left blank.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.margins([top], [right], [bottom], [left], [pageNumber])"
      },
      {
        "name": "bleeds",
        "description": "Sets the document bleeds. If one value is given, all 4 are set equally. If 4 values are given, the top/right/bottom/left document bleeds will be adjusted. Calling the function without any values, will return the document bleed settings.",
        "returns": {
          "name": null,
          "description": "Current document bleeds settings.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "top",
            "description": "Optional, top bleed or all if only one.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "right",
            "description": "Optional, right bleed.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "bottom",
            "description": "Optional, bottom bleed.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "left",
            "description": "Optional, left bleed.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.bleeds([top], [right], [bottom], [left])"
      }
    ],
    "subcat": "Page"
  },
  {
    "entries": [
      {
        "name": "MODESILENT",
        "description": "Used with b.go() to set Performance Mode. Disables ScreenRedraw during processing.",
        "returns": null,
        "category": "Environment",
        "subcategory": "modes",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.MODESILENT"
      },
      {
        "name": "MODEHIDDEN",
        "description": "Used with b.go() to set Performance Mode. Processes Document in background mode. Document will not be visible until the script is done. If you are firing on a open document you'll need to save it before calling b.go(). The document will be removed from the display list and added again after the script is done. In this mode you will likely look at indesign with no open document for quite some time - do not work in indesign during this time. You may want to use b.println(\"yourMessage\") in your script and look at the Console in estk to get information about the process.",
        "returns": null,
        "category": "Environment",
        "subcategory": "modes",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.MODEHIDDEN"
      },
      {
        "name": "MODEVISIBLE",
        "description": "Default mode. Used with b.go() to set Performance Mode. Processes Document with Screen redraw, use this option to see direct results during the process. This will slow down the process in terms of processing time. This mode was also the default in Versions prior to 0.22",
        "returns": null,
        "category": "Environment",
        "subcategory": "modes",
        "parameters": [],
        "kind": "property",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.MODEVISIBLE"
      }
    ],
    "subcat": "modes"
  },
  {
    "entries": [
      {
        "name": "stories",
        "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each story of the given document.",
        "returns": {
          "name": null,
          "description": "A collection of Story objects.",
          "type": [
            "Stories"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "doc",
            "description": "The document instance to iterate the stories in",
            "optional": false,
            "type": [
              "Document"
            ]
          },
          {
            "name": "cb",
            "description": "The callback function to call with each story. When this function returns false the loop stops. Passed arguments: story, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function with each story of the given document."
          }
        ],
        "examples": [
          {
            "description": null,
            "code": "b.stories(b.doc(), function(story, loopCount){\n  b.println(\"Number of words in each Story:\");\n  b.println(story.words.length);\n});"
          }
        ],
        "todo": null,
        "codetitle": "b.stories(doc, [cb])"
      },
      {
        "name": "paragraphs",
        "description": "If no callback function is given it returns a Collection of paragraphs in the container otherwise calls the given callback function with each paragraph of the given document, page, story or textFrame.",
        "returns": {
          "name": null,
          "description": "A collection of Paragraph objects.",
          "type": [
            "Paragraphs"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "container",
            "description": "The document, story, page or textFrame instance to iterate the paragraphs in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Story",
              "TextFrame"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each paragraph. When this function returns false the loop stops. Passed arguments: para, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no callback function is given it returns a Collection of paragraphs in the container otherwise calls the given callback function with each paragraph of the given document, page, story or textFrame."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.paragraphs(container, [cb])"
      },
      {
        "name": "lines",
        "description": "If no callback function is given it returns a Collection of lines in the container otherwise calls the given callback function with each line of the given document, page, story, textFrame or paragraph.",
        "returns": {
          "name": null,
          "description": "A collection of Line objects.",
          "type": [
            "Lines"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, story, textFrame or paragraph instance to iterate the lines in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Story",
              "TextFrame",
              "Paragraph"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each line. When this function returns false the loop stops. Passed arguments: line, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no callback function is given it returns a Collection of lines in the container otherwise calls the given callback function with each line of the given document, page, story, textFrame or paragraph."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.lines(container, [cb])"
      },
      {
        "name": "words",
        "description": "If no callback function is given it returns a Collection of words in the container otherwise calls the given callback function with each word of the given document, page, story, textFrame, paragraph or line.",
        "returns": {
          "name": null,
          "description": "A collection of Word objects.",
          "type": [
            "Words"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, story, textFrame, paragraph or line instance to iterate the words in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Story",
              "TextFrame",
              "Paragraph",
              "Line"
            ]
          },
          {
            "name": "cb",
            "description": "The callback function to call with each word. When this function returns false the loop stops. Passed arguments: word, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no callback function is given it returns a Collection of words in the container otherwise calls the given callback function with each word of the given document, page, story, textFrame, paragraph or line."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.words(container, [cb])"
      },
      {
        "name": "characters",
        "description": "If no callback function is given it returns a Collection of characters in the container otherwise calls the given callback function with each character of the given document, page, story, textFrame, paragraph, line or word.",
        "returns": {
          "name": null,
          "description": "A collection of Character objects.",
          "type": [
            "Characters"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, story, textFrame, paragraph, line or word instance to  iterate the characters in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Story",
              "TextFrame",
              "Paragraph",
              "Line",
              "Word"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each character. When this function returns false the loop stops. Passed arguments: character, loopCount",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no callback function is given it returns a Collection of characters in the container otherwise calls the given callback function with each character of the given document, page, story, textFrame, paragraph, line or word."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.characters(container, [cb])"
      },
      {
        "name": "items",
        "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function for each of the PageItems in the given Document, Page, Layer or Group.",
        "returns": {
          "name": null,
          "description": "A collection of PageItem objects.",
          "type": [
            "PageItems"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "container",
            "description": "The container where the PageItems sit in",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call for each PageItem. When this function returns false the loop stops. Passed arguments: item, loopCount.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no callback function is given it returns a Collection of items otherwise calls the given callback function for each of the PageItems in the given Document, Page, Layer or Group."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.items(container, [cb])"
      },
      {
        "name": "labels",
        "description": "Returns items tagged with the given label in the InDesign Script Label pane (Window -> Utilities -> Script Label).",
        "returns": {
          "name": null,
          "description": "Array of concrete PageItem instances, e.g. TextFrame or SplineItem.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "label",
            "description": "The label identifier.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "cb",
            "description": "Optional, the callback function to call with each item in the search result. When this function returns false the loop stops. Passed arguments: item, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.labels(label, [cb])"
      },
      {
        "name": "label",
        "description": "Returns the first item that is tagged with the given label in the InDesign Script Label pane (Window -> Utilities -> Script Label). Use this instead of b.labels, when you know you just have one thing with that label and don't want to deal with a single-element array.",
        "returns": {
          "name": null,
          "description": "The first PageItem with the given label.",
          "type": [
            "PageItem"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "label",
            "description": "The label identifier.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.label(label)"
      },
      {
        "name": "selection",
        "description": "Returns the first currently selected object. Use this if you know you only have one selected item and don't want to deal with an array.",
        "returns": {
          "name": null,
          "description": "The first selected object.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.selection()"
      },
      {
        "name": "selections",
        "description": "Returns the currently selected object(s)",
        "returns": {
          "name": null,
          "description": "Array of selected object(s).",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [
          {
            "name": "cb",
            "description": "Optional, the callback function to call with each item in the selection. When this function returns false the loop stops. Passed arguments: item, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.selections([cb])"
      },
      {
        "name": "nameOnPage",
        "description": "Returns the first item on the active page that is named by the given name in the Layers pane (Window -> Layer).",
        "returns": {
          "name": null,
          "description": "The first object on the active page with the given name.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Multi-Getters",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.nameOnPage()"
      }
    ],
    "subcat": "Multi-Getters"
  },
  {
    "entries": [
      {
        "name": "storyCount",
        "description": "The number of all stories in the current document.",
        "returns": {
          "name": null,
          "description": "count The amount of stories.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Story",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.storyCount()"
      },
      {
        "name": "addToStory",
        "description": "Adds a page item or a string to an existing story. You can control the position of the insert via the last parameter. It accepts either an InsertionPoint or one the following constants: b.AT_BEGINNING and b.AT_END.",
        "returns": null,
        "category": "Document",
        "subcategory": "Story",
        "parameters": [
          {
            "name": "story",
            "description": "The story.",
            "optional": false,
            "type": [
              "Story"
            ]
          },
          {
            "name": "itemOrString",
            "description": "The itemOrString either a PageItem, a String or one the following constants: b.AT_BEGINNING and b.AT_END.",
            "optional": false,
            "type": [
              "PageItem",
              "String"
            ]
          },
          {
            "name": "insertionPointOrMode",
            "description": "InsertionPoint or one the following constants: b.AT_BEGINNING and b.AT_END.",
            "optional": false,
            "type": [
              "InsertionPoint",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.addToStory(story, itemOrString, insertionPointOrMode)"
      }
    ],
    "subcat": "Story"
  },
  {
    "entries": [
      {
        "name": "year",
        "description": "The year() function returns the current year as an integer (2012, 2013 etc).",
        "returns": {
          "name": null,
          "description": "The current year.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.year()"
      },
      {
        "name": "month",
        "description": "The month() function returns the current month as a value from 1 - 12.",
        "returns": {
          "name": null,
          "description": "The current month number.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.month()"
      },
      {
        "name": "day",
        "description": "The day() function returns the current day as a value from 1 - 31.",
        "returns": {
          "name": null,
          "description": "The current day number.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.day()"
      },
      {
        "name": "weekday",
        "description": "The weekday() function returns the current weekday as a string from Sunday, Monday, Tuesday...",
        "returns": {
          "name": null,
          "description": "The current weekday name.",
          "type": [
            "String"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.weekday()"
      },
      {
        "name": "hour",
        "description": "The hour() function returns the current hour as a value from 0 - 23.",
        "returns": {
          "name": null,
          "description": "The current hour.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.hour()"
      },
      {
        "name": "minute",
        "description": "The minute() function returns the current minute as a value from 0 - 59.",
        "returns": {
          "name": null,
          "description": "The current minute.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.minute()"
      },
      {
        "name": "second",
        "description": "The second() function returns the current second as a value from 0 - 59.",
        "returns": {
          "name": null,
          "description": "The current second.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.second()"
      },
      {
        "name": "millis",
        "description": "Returns the number of milliseconds (thousandths of a second) since starting an applet.",
        "returns": {
          "name": null,
          "description": "The current milli.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.millis()"
      },
      {
        "name": "millisecond",
        "description": "The millisecond() function differs from millis(), in that it returns the exact millisecond (thousandths of a second) of the current time.",
        "returns": {
          "name": null,
          "description": "The current millisecond.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.millisecond()"
      },
      {
        "name": "timestamp",
        "description": "The timestamp() function returns the current date formatted as YYYYMMDD_HHMMSS for useful unique filenaming.",
        "returns": {
          "name": null,
          "description": "The current time in YYYYMMDD_HHMMSS.",
          "type": [
            "String"
          ]
        },
        "category": "Environment",
        "subcategory": "Date",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.timestamp()"
      }
    ],
    "subcat": "Date"
  },
  {
    "entries": [
      {
        "name": "JSON.decode",
        "description": "Function parses and validates a string as JSON-object. Usage:\nvar obj = b.JSON.decode(str);\nvar str = b.JSON.encode(obj);",
        "returns": {
          "name": null,
          "description": "Returns JSON-object or throws an error if invalid JSON has been provided.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "JSON",
        "parameters": [
          {
            "name": "String",
            "description": "to be parsed as JSON-object.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.JSON.decode(String)"
      },
      {
        "name": "JSON.encode",
        "description": "Function convert an javascript object to a JSON-string. Usage:\nvar str = b.JSON.encode(obj);\nvar obj = b.JSON.decode(str);",
        "returns": {
          "name": null,
          "description": "Returns JSON-string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "JSON",
        "parameters": [
          {
            "name": "Object",
            "description": "to be converted to a JSON-string",
            "optional": false,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.JSON.encode(Object)"
      }
    ],
    "subcat": "JSON"
  },
  {
    "entries": [
      {
        "name": "binary",
        "description": "Converts a byte, char, int, or color to a String containing the\nequivalent binary notation. For example color(0, 102, 153, 255)\nwill convert to the String \"11111111000000000110011010011001\". This\nfunction can help make your geeky debugging sessions much happier.",
        "returns": {
          "name": null,
          "description": "A formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "num",
            "description": "value to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "numBits",
            "description": "number of digits to return",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.binary(num, [numBits])"
      },
      {
        "name": "unbinary",
        "description": "Converts a String representation of a binary number to its\nequivalent integer value. For example, unbinary(\"00001000\") will\nreturn 8.",
        "returns": {
          "name": null,
          "description": "The integer representation",
          "type": [
            "Number"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "binaryString",
            "description": "value to convert",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.unbinary(binaryString)"
      },
      {
        "name": "hex",
        "description": "Convert a number to a hex representation.",
        "returns": {
          "name": null,
          "description": "The hex representation as a string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "value",
            "description": "The number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "len",
            "description": "The length of the hex number to be created, default: 8",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.hex(value, [len])"
      },
      {
        "name": "unhex",
        "description": "Convert a hex representation to a number.",
        "returns": {
          "name": null,
          "description": "The number",
          "type": [
            "Number"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "hex",
            "description": "The hex representation",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.unhex(hex)"
      }
    ],
    "subcat": "Conversion"
  },
  {
    "entries": [
      {
        "name": "trimWord",
        "description": "Removes multiple, leading or trailing spaces and punctuation from \"words\". E.g. converts \"word!\" to \"word\". Especially useful together with b.words();",
        "returns": {
          "name": null,
          "description": "The trimmed string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "s",
            "description": "The String to trim",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.trimWord(s)"
      },
      {
        "name": "join",
        "description": "Combines an array of Strings into one String, each separated by\nthe character(s) used for the separator parameter. To join arrays\nof ints or floats, it's necessary to first convert them to strings\nusing nf() or nfs().",
        "returns": {
          "name": null,
          "description": "The joined string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "array",
            "description": "A string array",
            "optional": false,
            "type": [
              "Array"
            ]
          },
          {
            "name": "separator",
            "description": "The separator to be inserted",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.join(array, separator)"
      },
      {
        "name": "split",
        "description": "The split() function breaks a string into pieces using a\ncharacter or string as the divider. The delim parameter specifies the\ncharacter or characters that mark the boundaries between each piece. A\nString[] array is returned that contains each of the pieces.",
        "returns": {
          "name": null,
          "description": "Array of strings",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "the String to be split",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "delim",
            "description": "The string used to separate the data",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.split(str, [delim])"
      },
      {
        "name": "splitTokens",
        "description": "The splitTokens() function splits a String at one or many character\n\"tokens.\" The tokens parameter specifies the character or characters\nto be used as a boundary.",
        "returns": {
          "name": null,
          "description": "Array of strings",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "the String to be split",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "tokens",
            "description": "list of individual characters that will be used as separators",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.splitTokens(str, [tokens])"
      },
      {
        "name": "nf",
        "description": "Utility function for formatting numbers into strings. There\nare two versions, one for formatting floats and one for formatting\nints. The values for the digits, left, and right parameters should\nalways be positive integers.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.nf(value, leftDigits, rightDigits)"
      },
      {
        "name": "nfs",
        "description": "Utility function for formatting numbers into strings. Similar to nf()\nbut leaves a blank space in front of positive numbers so they align\nwith negative numbers in spite of the minus symbol. There are two\nversions, one for formatting floats and one for formatting ints. The\nvalues for the digits, left, and right parameters should always be\npositive integers.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.nfs(value, leftDigits, rightDigits)"
      },
      {
        "name": "nfp",
        "description": "Utility function for formatting numbers into strings. Similar to nf()\nbut puts a \"+\" in front of positive numbers and a \"-\" in front of\nnegative numbers. There are two versions, one for formatting floats\nand one for formatting ints. The values for the digits, left, and right\nparameters should always be positive integers.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.nfp(value, leftDigits, rightDigits)"
      },
      {
        "name": "nfc",
        "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions, one\nfor formatting ints and one for formatting an array of ints. The value\nfor the digits parameter should always be a positive integer.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.nfc(value, leftDigits, rightDigits)"
      },
      {
        "name": "trim",
        "description": "Removes whitespace characters from the beginning and end of a String.\nIn addition to standard whitespace characters such as space, carriage\nreturn, and tab, this function also removes the Unicode \"nbsp\" character.",
        "returns": {
          "name": null,
          "description": "Returns the input in a trimmed way",
          "type": [
            "String",
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "A string or an array of strings to be trimmed",
            "optional": false,
            "type": [
              "String",
              "Array"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.trim(str)"
      },
      {
        "name": "isURL",
        "description": "Checks whether an URL string is valid.",
        "returns": {
          "name": null,
          "description": "Returns either true or false",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "url",
            "description": "An url string to be checked",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.isURL(url)"
      },
      {
        "name": "endsWith",
        "description": "Checks whether a string ends with a specific character or string.",
        "returns": {
          "name": null,
          "description": "Returns either true or false",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "A string to be checked",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "suffix",
            "description": "The string to look for",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.endsWith(str, suffix)"
      },
      {
        "name": "startsWith",
        "description": "Checks whether a string starts with a specific character or string.",
        "returns": {
          "name": null,
          "description": "Returns either true or false",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "A string to be checked",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "prefix",
            "description": "The string to look for",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.startsWith(str, prefix)"
      }
    ],
    "subcat": "String Functions"
  },
  {
    "entries": [
      {
        "name": "shellExecute",
        "description": "Executes a shell command and returns the result, currently Mac only.",
        "returns": {
          "name": null,
          "description": null,
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "Input",
        "parameters": [
          {
            "name": "cmd",
            "description": "The shell command to execute",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.shellExecute(cmd)"
      },
      {
        "name": "loadString",
        "description": "Reads the contents of a file or loads an URL into a String.\nIf the file is specified by name as String, it must be located in the document's data directory.",
        "returns": {
          "name": null,
          "description": "String file or URL content.",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "Input",
        "parameters": [
          {
            "name": "fileOrString",
            "description": "The text file name in the document's data directory or a File instance or an URL",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.loadString(fileOrString)"
      },
      {
        "name": "loadStrings",
        "description": "Reads the contents of a file or loads an URL and creates a String array of its individual lines.\nIf the file is specified by name as String, it must be located in the document's data directory.",
        "returns": {
          "name": null,
          "description": "Array of the individual lines in the given File or URL",
          "type": []
        },
        "category": "Data",
        "subcategory": "Input",
        "parameters": [
          {
            "name": "file",
            "description": "The text file name in the document's data directory or a File instance or an URL",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.loadStrings(file)"
      }
    ],
    "subcat": "Input"
  },
  {
    "entries": [
      {
        "name": "rectMode",
        "description": "Modifies the location from which rectangles draw. The default mode is\nrectMode(CORNER), which specifies the location to be the upper left\ncorner of the shape and uses the third and fourth parameters of rect()\nto specify the width and height. The syntax rectMode(CORNERS) uses the\nfirst and second parameters of rect() to set the location of one corner\nand uses the third and fourth parameters to set the opposite corner.\nThe syntax rectMode(CENTER) draws the image from its center point and\nuses the third and forth parameters of rect() to specify the image's\nwidth and height. The syntax rectMode(RADIUS) draws the image from its\ncenter point and uses the third and forth parameters of rect() to specify\nhalf of the image's width and height. The parameter must be written in\n\"ALL CAPS\".",
        "returns": null,
        "category": "Document",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "mode",
            "description": "The rectMode to switch to: either b.CORNER, b.CORNERS, b.CENTER, or b.RADIUS.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.rectMode(mode)"
      },
      {
        "name": "ellipseMode",
        "description": "The origin of new ellipses is modified by the ellipseMode() function.\nThe default configuration is ellipseMode(CENTER), which specifies the\nlocation of the ellipse as the center of the shape. The RADIUS mode is\nthe same, but the width and height parameters to ellipse() specify the\nradius of the ellipse, rather than the diameter. The CORNER mode draws\nthe shape from the upper-left corner of its bounding box. The CORNERS\nmode uses the four parameters to ellipse() to set two opposing corners\nof the ellipse's bounding box. The parameter must be written in \"ALL CAPS\".",
        "returns": null,
        "category": "Document",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "mode",
            "description": "The ellipse mode to switch to: either b.CENTER, b.RADIUS, b.CORNER, or b.CORNERS.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.ellipseMode(mode)"
      },
      {
        "name": "strokeWeight",
        "description": "Sets the width of the stroke used for lines and the border around shapes.",
        "returns": null,
        "category": "Document",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "weight",
            "description": "The width of the stroke in points.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.strokeWeight(weight)"
      }
    ],
    "subcat": "Attributes"
  },
  {
    "entries": [
      {
        "name": "duplicate",
        "description": "Duplicates the given page after the current page or the given page item to the current page and layer. Use b.rectMode() to set center point.",
        "returns": {
          "name": null,
          "description": "The new page item or page.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "item",
            "description": "The page item or page to duplicate.",
            "optional": false,
            "type": [
              "PageItem",
              "Page"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.duplicate(item)"
      },
      {
        "name": "bounds",
        "description": "The function calculates the geometric bounds of any given object. Use b.itemX(), b.itemY(), b.itemPosition(), b.itemWidth(), b.itemHeight() and b.itemSize() to modify PageItems.\nIn case the object is any kind of text, then additional typographic information baseline and xHeight are calculated",
        "returns": {
          "name": null,
          "description": "Geometric bounds object with these properties: width, height, left, right, top, bottom and for text: baseline, xHeight.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "obj",
            "description": "The object to calculate the geometric bounds.",
            "optional": false,
            "type": [
              "Text",
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.bounds(obj)"
      },
      {
        "name": "itemX",
        "description": "Positions a PageItem at the designated spot on the x axis. If no x argument is given the current x position is returned.",
        "returns": {
          "name": null,
          "description": "The current x position.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "pItem",
            "description": "The PageItem to alter.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "x",
            "description": "The new x position, optional.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.itemX(pItem, [x])"
      },
      {
        "name": "itemY",
        "description": "Positions a PageItem at the designated spot on the y axis. If no y argument is given the current y position is returned.",
        "returns": {
          "name": null,
          "description": "The current y position.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "pItem",
            "description": "The PageItem to alter.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "y",
            "description": "The new y position, optional.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.itemY(pItem, [y])"
      },
      {
        "name": "itemWidth",
        "description": "Scales the given PageItem to the given width. If width is not given as argument the current width is returned.",
        "returns": {
          "name": null,
          "description": "The current width.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "pItem",
            "description": "The PageItem to alter.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "width",
            "description": "The new width.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Scales the given PageItem to the given width. If width is not given as argument the current width is returned."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.itemWidth(pItem, [width])"
      },
      {
        "name": "itemHeight",
        "description": "Scales the given PageItem to the given height. If height is not given as argument the current height is returned.",
        "returns": {
          "name": null,
          "description": "The current height.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "pItem",
            "description": "The PageItem to alter.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "height",
            "description": "The new height.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Scales the given PageItem to the given height. If height is not given as argument the current height is returned."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.itemHeight(pItem, [height])"
      },
      {
        "name": "itemPosition",
        "description": "Moves the given PageItem to the given position. If x or y is not given as argument the current position is returned.",
        "returns": {
          "name": null,
          "description": "Returns an object with the fields x and y.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "pItem",
            "description": "The PageItem to alter.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "x",
            "description": "The new x coordinate.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The new y coordinate.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Moves the given PageItem to the given position. If x or y is not given as argument the current position is returned."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.itemPosition(pItem, [x], [y])"
      },
      {
        "name": "itemSize",
        "description": "Scales the given PageItem to the given size. If width or height is not given as argument the current size is returned.",
        "returns": {
          "name": null,
          "description": "Returns an object with the fields width and height.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "pItem",
            "description": "The PageItem to alter.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "width",
            "description": "The new width.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "height",
            "description": "The new height.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Scales the given PageItem to the given size. If width or height is not given as argument the current size is returned."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.itemSize(pItem, [width], [height])"
      },
      {
        "name": "matrix",
        "description": "Returns the current matrix as a Matrix2D object for altering existing PageItems with b.transform(). If a Matrix2D object is provided to the function it will overwrite the current matrix.",
        "returns": {
          "name": null,
          "description": "Returns the current matrix.",
          "type": [
            "Matrix2D"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "matrix",
            "description": "The matrix to be set as new current matrix.",
            "optional": true,
            "type": [
              "Matrix2D"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current matrix as a Matrix2D object for altering existing PageItems with b.transform(). If a Matrix2D object is provided to the function it will overwrite the current matrix."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.matrix([matrix])"
      },
      {
        "name": "transform",
        "description": "Transforms the given PageItem with the given Matrix2D object.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "obj",
            "description": "The item to be transformed.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "matrix",
            "description": "The matrix to be applied.",
            "optional": false,
            "type": [
              "Matrix2D"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Transforms the given PageItem with the given Matrix2D object."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.transform(obj, matrix)"
      },
      {
        "name": "applyMatrix",
        "description": "Multiplies the current matrix by the one specified through the parameters.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "matrix",
            "description": "The matrix to be applied.",
            "optional": false,
            "type": [
              "Matrix2D"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Multiplies the current matrix by the one specified through the parameters."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.applyMatrix(matrix)"
      },
      {
        "name": "popMatrix",
        "description": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The ",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The <code>pushMatrix()</code> function saves the current coordinate system to the stack and <code>popMatrix()</code> restores the prior coordinate system. <code>pushMatrix()</code> and <code>popMatrix()</code> are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.popMatrix()"
      },
      {
        "name": "printMatrix",
        "description": "Prints the current matrix to the console window.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.printMatrix()"
      },
      {
        "name": "pushMatrix",
        "description": "Pushes the current transformation matrix onto the matrix stack. Understanding ",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Pushes the current transformation matrix onto the matrix stack. Understanding <code>pushMatrix()</code> and <code>popMatrix()</code> requires understanding the concept of a matrix stack. The <code>pushMatrix()</code> function saves the current coordinate system to the stack and <code>popMatrix()</code> restores the prior coordinate system. <code>pushMatrix()</code> and <code>popMatrix()</code> are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.pushMatrix()"
      },
      {
        "name": "resetMatrix",
        "description": "Replaces the current matrix with the identity matrix.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.resetMatrix()"
      },
      {
        "name": "rotate",
        "description": "Rotates an object the amount specified by the angle parameter. Angles should be specified in radians (values from 0 to ",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "angle",
            "description": "The angle specified in radians",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Rotates an object the amount specified by the angle parameter. Angles should be specified in radians (values from 0 to <code>PI</code>*2) or converted to radians with the <code>radians()</code> function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction with 0 radians or degrees being up and <code>HALF_PI</code> being to the right etc. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <code>rotate(PI/2)</code> and then <code>rotate(PI/2)</code> is the same as <code>rotate(PI)</code>. If <code>rotate()</code> is called within the <code>draw()</code>, the transformation is reset when the loop begins again. Technically, <code>rotate()</code> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <code>pushMatrix()</code> and <code>popMatrix()</code>."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.rotate(angle)"
      },
      {
        "name": "scale",
        "description": "Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call ",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "scaleX",
            "description": "The amount to scale the X axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "scaleY",
            "description": "The amount to scale the Y axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call <code>scale(2.0)</code> increases the dimension of a shape by 200%. Objects always scale from their relative origin to the coordinate system. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling <code>scale(2.0)</code> and then <code>scale(1.5)</code> is the same as <code>scale(3.0)</code>. If <code>scale()</code> is called within <code>draw()</code>, the transformation is reset when the loop begins again. This function can be further controlled by <code>pushMatrix()</code> and <code>popMatrix()</code>.\nIf only one parameter is given, it is applied on X and Y axis."
          }
        ],
        "examples": [],
        "todo": "Can we make the argument comparison typesafe? != vs !==",
        "codetitle": "b.scale(scaleX, scaleY)"
      },
      {
        "name": "translate",
        "description": "Specifies an amount to displace objects within the page. The x parameter specifies left/right translation, the y parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling ",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "tx",
            "description": "The amount of offset on the X axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ty",
            "description": "The amount of offset on the Y axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Specifies an amount to displace objects within the page. The x parameter specifies left/right translation, the y parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling <code>translate(50, 0)</code> and then <code>translate(20, 0)</code> is the same as <code>translate(70, 0)</code>. This function can be further controlled by the <code>pushMatrix()</code> and <code>popMatrix()</code>."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.translate(tx, ty)"
      },
      {
        "name": "Matrix2D",
        "description": "A matrix.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "A matrix."
          }
        ],
        "examples": [],
        "todo": "Add more description.",
        "codetitle": "b.Matrix2D()"
      },
      {
        "name": "Matrix2D.set",
        "description": "Set a Matrix.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Set a Matrix."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.set()"
      },
      {
        "name": "Matrix2D.get",
        "description": "Get a Matrix.",
        "returns": {
          "name": null,
          "description": "The current Matrix.",
          "type": [
            "Matrix2D"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Get a Matrix."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.get()"
      },
      {
        "name": "Matrix2D.reset",
        "description": "Reset the Matrix.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Reset the Matrix."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Matrix2D.reset()"
      },
      {
        "name": "Matrix2D.array",
        "description": "Slice the Matrix into an array.",
        "returns": {
          "name": null,
          "description": "Returns an sliced array.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Slice the Matrix into an array."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.array()"
      },
      {
        "name": "Matrix2D.adobeMatrix",
        "description": "Slice the Matrix into an array.",
        "returns": {
          "name": null,
          "description": "Returns an Adobe Matrix.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Slice the Matrix into an array."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.adobeMatrix()"
      },
      {
        "name": "Matrix2D.translate",
        "description": "translate Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "tx",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ty",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "translate Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.translate(tx, ty)"
      },
      {
        "name": "Matrix2D.invTranslate",
        "description": "invTranslate Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "tx",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ty",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "invTranslate Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.invTranslate(tx, ty)"
      },
      {
        "name": "Matrix2D.transpose",
        "description": "transpose Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "transpose Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.transpose()"
      },
      {
        "name": "Matrix2D.mult",
        "description": "mult Needs more description.",
        "returns": {
          "name": null,
          "description": "A multiplied Vector.",
          "type": [
            "Vector"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "source",
            "description": "…",
            "optional": false,
            "type": [
              "Vector",
              "Array"
            ]
          },
          {
            "name": "target",
            "description": "…",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "mult Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.mult(source, [target])"
      },
      {
        "name": "Matrix2D.multX",
        "description": "multX Needs more description.",
        "returns": {
          "name": null,
          "description": "A mulitplied X value.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "x",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "multX Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.multX(x, y)"
      },
      {
        "name": "Matrix2D.multY",
        "description": "multY Needs more description.",
        "returns": {
          "name": null,
          "description": "A multiplied Y value.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "x",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "multY Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.multY(x, y)"
      },
      {
        "name": "Matrix2D.determinant",
        "description": "determinant Needs more description.",
        "returns": {
          "name": null,
          "description": "A determinant …",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "determinant Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.determinant()"
      },
      {
        "name": "Matrix2D.invert",
        "description": "invert Needs more description.",
        "returns": {
          "name": null,
          "description": "…",
          "type": [
            "Boolean"
          ]
        },
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "invert Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.invert()"
      },
      {
        "name": "Matrix2D.scale",
        "description": "scale Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "sx",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "sy",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "scale Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.scale(sx, sy)"
      },
      {
        "name": "Matrix2D.invScale",
        "description": "invScale Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "sx",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "sy",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "invScale Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.invScale(sx, sy)"
      },
      {
        "name": "Matrix2D.apply",
        "description": "apply Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "apply Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.apply()"
      },
      {
        "name": "Matrix2D.preApply",
        "description": "preApply Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "preApply Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.preApply()"
      },
      {
        "name": "Matrix2D.rotate",
        "description": "rotate Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "angle",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "rotate Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.rotate(angle)"
      },
      {
        "name": "Matrix2D.rotateZ",
        "description": "rotateZ Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "angle",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "rotateZ Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.rotateZ(angle)"
      },
      {
        "name": "Matrix2D.invRotateZ",
        "description": "invRotateZ Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [
          {
            "name": "angle",
            "description": "…",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "invRotateZ Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.invRotateZ(angle)"
      },
      {
        "name": "Matrix2D.print",
        "description": "print Needs more description.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "print Needs more description."
          }
        ],
        "examples": [],
        "todo": "More description.",
        "codetitle": "b.Matrix2D.print()"
      },
      {
        "name": "prototype",
        "description": "A Matrix object.",
        "returns": null,
        "category": "Document",
        "subcategory": "Transformation",
        "parameters": [],
        "kind": "Object",
        "tags": [
          {
            "title": "description",
            "description": "A Matrix object."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": null
      }
    ],
    "subcat": "Transformation"
  },
  {
    "entries": [
      {
        "name": "image",
        "description": "Adds an image to the document. If the image argument is given as a string the image file must be in the document's\ndata directory which is in the same directory where the document is saved in. The image argument can also be a File\ninstance which can be placed even before the document was saved.\nThe second argument can either be the x position of the frame to create or an instance of a rectangle,\noval or polygon to place the image in. If an x position is given, a y position must be given, too.\nIf x and y positions are given and width and height are not given, the frame's size gets set to the original image size.",
        "returns": {
          "name": null,
          "description": "The item instance the image was placed in.",
          "type": [
            "Rectangle",
            "Oval",
            "Polygon"
          ]
        },
        "category": "Document",
        "subcategory": "Image",
        "parameters": [
          {
            "name": "img",
            "description": "The image file name in the document's data directory or a File instance.",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "x",
            "description": "The x position on the current page or the item instance to place the image in.",
            "optional": false,
            "type": [
              "Number",
              "Rectangle",
              "Oval",
              "Polygon"
            ]
          },
          {
            "name": "y",
            "description": "The y position on the current page. Ignored if x is not a number.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "The width of the rectangle to add the image to. Ignored if x is not a number.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "The height of the rectangle to add the image to. Ignored if x is not a number.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.image(img, x, [y], [w], [h])"
      },
      {
        "name": "transformImage",
        "description": "Transforms position and size of an image.\nThe image fit options are always \"contentToFrame\".",
        "returns": null,
        "category": "Document",
        "subcategory": "Image",
        "parameters": [
          {
            "name": "img",
            "description": "The image to transform.",
            "optional": false,
            "type": [
              "Graphic"
            ]
          },
          {
            "name": "x",
            "description": "The new x.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The new y.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "width",
            "description": "The new width.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "height",
            "description": "The new height.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.transformImage(img, x, y, width, height)"
      },
      {
        "name": "imageMode",
        "description": "Modifies the location from which images draw. The default mode is imageMode(CORNER), which specifies the location to be the upper left corner and uses the fourth and fifth parameters of image() to set the image's width and height. The syntax imageMode(CORNERS) uses the second and third parameters of image() to set the location of one corner of the image and uses the fourth and fifth parameters to set the opposite corner. Use imageMode(CENTER) to draw images centered at the given x and y position.\nIf no parameter is passed the currently set mode is returned as String.",
        "returns": {
          "name": null,
          "description": "The current mode.",
          "type": [
            "String"
          ]
        },
        "category": "Document",
        "subcategory": "Image",
        "parameters": [
          {
            "name": "mode",
            "description": "Either b.CORNER, b.CORNERS, or b.CENTER.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.imageMode([mode])"
      }
    ],
    "subcat": "Image"
  },
  {
    "entries": [
      {
        "name": "abs",
        "description": "Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.",
        "returns": {
          "name": null,
          "description": "The absolute value of that number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "val",
            "description": "A number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.abs(val)"
      },
      {
        "name": "ceil",
        "description": "Calculates the closest int value that is greater than or equal to the value of the parameter. For example, ceil(9.03) returns the value 10.",
        "returns": {
          "name": null,
          "description": "The next highest integer value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "val",
            "description": "An arbitrary number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.ceil(val)"
      },
      {
        "name": "constrain",
        "description": "Constrains a value to not exceed a maximum and minimum value.",
        "returns": {
          "name": null,
          "description": "The constrained value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "aNumber",
            "description": "The value to constrain.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "aMin",
            "description": "Minimum limit.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "aMax",
            "description": "Maximum limit.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.constrain(aNumber, aMin, aMax)"
      },
      {
        "name": "dist",
        "description": "Calculates the distance between two points.",
        "returns": {
          "name": null,
          "description": "The distance.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x1",
            "description": "The x-coordinate of the first point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y1",
            "description": "The y-coordinate of the first point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x2",
            "description": "The x-coordinate of the second point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y2",
            "description": "The y-coordinate of the second point.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.dist(x1, y1, x2, y2)"
      },
      {
        "name": "exp",
        "description": "The Math.exp() function returns ex, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.",
        "returns": {
          "name": null,
          "description": "A number representing ex.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x",
            "description": "A number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.exp(x)"
      },
      {
        "name": "floor",
        "description": "Calculates the closest int value that is less than or equal to the value of the parameter.",
        "returns": {
          "name": null,
          "description": "Integer number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "a",
            "description": "A number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.floor(a)"
      },
      {
        "name": "lerp",
        "description": "Calculates a number between two numbers at a specific increment. The amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.",
        "returns": {
          "name": null,
          "description": "The mapped value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "value1",
            "description": "First value.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "value2",
            "description": "Second value.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "amt",
            "description": "Amount between 0.0 and 1.0.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.lerp(value1, value2, amt)"
      },
      {
        "name": "log",
        "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the values greater than 0.0.",
        "returns": {
          "name": null,
          "description": "The natural logarithm.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x",
            "description": "A number, must be greater then 0.0.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.log(x)"
      },
      {
        "name": "mag",
        "description": "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from coordinate (0,0) to its (x,y) value. Therefore, mag() is a shortcut for writing \"dist(0, 0, x, y)\".",
        "returns": {
          "name": null,
          "description": "The magnitude.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x",
            "description": "Coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Coordinate, optional.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.mag(x, y, [z])"
      },
      {
        "name": "map",
        "description": "Re-maps a number from one range to another.",
        "returns": {
          "name": null,
          "description": "The mapped value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "value",
            "description": "The value to be mapped.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "istart",
            "description": "The start of the input range.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "istop",
            "description": "The end of the input range.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ostart",
            "description": "The start of the output range.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ostop",
            "description": "The end of the output range.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.map(value, istart, istop, ostart, ostop)"
      },
      {
        "name": "max",
        "description": "Determines the largest value in a sequence of numbers.",
        "returns": {
          "name": null,
          "description": "The highest value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "a",
            "description": "A value or an array of Numbers.",
            "optional": false,
            "type": [
              "Number",
              "Array"
            ]
          },
          {
            "name": "b",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "c",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.max(a, [b], [c])"
      },
      {
        "name": "min",
        "description": "Determines the smallest value in a sequence of numbers.",
        "returns": {
          "name": null,
          "description": "The lowest value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "a",
            "description": "A value or an array of Numbers.",
            "optional": false,
            "type": [
              "Number",
              "Array"
            ]
          },
          {
            "name": "b",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "c",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.min(a, [b], [c])"
      },
      {
        "name": "norm",
        "description": "Normalizes a number from another range into a value between 0 and 1.",
        "returns": {
          "name": null,
          "description": "The normalized value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "aNumber",
            "description": "The value to be normed.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "low",
            "description": "The lowest value to be expected.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "high",
            "description": "The highest value to be expected.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.norm(aNumber, low, high)"
      },
      {
        "name": "pow",
        "description": "Facilitates exponential expressions. The pow() function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, pow(3, 5) is equivalent to the expression 3",
        "returns": {
          "name": null,
          "description": "the result",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "num",
            "description": "Base of the exponential expression.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "exponent",
            "description": "Power of which to raise the base.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.pow(num, exponent)"
      },
      {
        "name": "round",
        "description": "Calculates the integer closest to the value parameter. For example, round(9.2) returns the value 9.",
        "returns": {
          "name": null,
          "description": "The rounded value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "value",
            "description": "The value to be rounded.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.round(value)"
      },
      {
        "name": "sq",
        "description": "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1.",
        "returns": {
          "name": null,
          "description": "Squared number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "aNumber",
            "description": "The value to be squared.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.sq(aNumber)"
      }
    ],
    "subcat": "Calculation"
  },
  {
    "entries": [
      {
        "name": "sqrt",
        "description": "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that s*s = a. It is the opposite of squaring.",
        "returns": {
          "name": null,
          "description": "Square root.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "val",
            "description": "A value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.sqrt(val)"
      },
      {
        "name": "acos",
        "description": "The inverse of cos(), returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
        "returns": {
          "name": null,
          "description": "The arc cosine.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "value",
            "description": "The value whose arc cosine is to be returned.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.acos(value)"
      },
      {
        "name": "asin",
        "description": "The inverse of sin(), returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
        "returns": {
          "name": null,
          "description": "The arc sine.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "value",
            "description": "The value whose arc sine is to be returned.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.asin(value)"
      },
      {
        "name": "atan",
        "description": "The inverse of tan(), returns the arc tangent of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
        "returns": {
          "name": null,
          "description": "The arc tangent.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "value",
            "description": "The value whose arc tangent is to be returned.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.atan(value)"
      },
      {
        "name": "atan2",
        "description": "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from PI to -PI. The atan2() function is most often used for orienting geometry to the position of the cursor. Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent.",
        "returns": {
          "name": null,
          "description": "The atan2 value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "y",
            "description": "The y coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x",
            "description": "The x coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.atan2(y, x)"
      },
      {
        "name": "cos",
        "description": "Calculates the cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range -1 to 1.",
        "returns": {
          "name": null,
          "description": "The cosine.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "rad",
            "description": "A value in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.cos(rad)"
      },
      {
        "name": "degrees",
        "description": "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.",
        "returns": {
          "name": null,
          "description": "The given angle in degree.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "aAngle",
            "description": "An angle in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.degrees(aAngle)"
      },
      {
        "name": "radians",
        "description": "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.",
        "returns": {
          "name": null,
          "description": "The given angle in radians.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "aAngle",
            "description": "An angle in degree.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.radians(aAngle)"
      },
      {
        "name": "sin",
        "description": "Calculates the sine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to 6.28). Values are returned in the range -1 to 1.",
        "returns": {
          "name": null,
          "description": "The sine value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "rad",
            "description": "A value in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.sin(rad)"
      },
      {
        "name": "tan",
        "description": "Calculates the ratio of the sine and cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range infinity to -infinity.",
        "returns": {
          "name": null,
          "description": "The tangent value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "rad",
            "description": "A value in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.tan(rad)"
      }
    ],
    "subcat": "Trigonometry"
  },
  {
    "entries": [
      {
        "name": "random",
        "description": "Generates random numbers. Each time the random() function is called, it returns an unexpected value within the specified range. If one parameter is passed to the function it will return a float between zero and the value of the high parameter. The function call random(5) returns values between 0 and 5. If two parameters are passed, it will return a float with a value between the the parameters. The function call random(-5, 10.2) returns values between -5 and 10.2.",
        "returns": {
          "name": null,
          "description": "A random number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "low",
            "description": "The low border of the range.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "high",
            "description": "The high border of the range.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.random([low], [high])"
      },
      {
        "name": "randomSeed",
        "description": "Sets the seed value for random().",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "seed",
            "description": "The seed value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.randomSeed(seed)"
      },
      {
        "name": "Random",
        "description": "Random Generator with Gaussian distribution.",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "seed",
            "description": "The seed value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Random(seed)"
      },
      {
        "name": "noise",
        "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural ordered, harmonic succession of numbers compared to the standard random() function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.",
        "returns": {
          "name": null,
          "description": "The noise value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "x",
            "description": "Coordinate in x space.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Coordinate in y space.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Coordinate in z space.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.noise(x, [y], [z])"
      },
      {
        "name": "noiseDetail",
        "description": "Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overal intensity of the noise, whereas higher octaves create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the 1st octave. This falloff amount can be changed by adding an additional function parameter. Eg. a falloff factor of 0.75 means each octave will now have 75% impact (25% less) of the previous lower octave. Any value between 0.0 and 1.0 is valid, however note that values greater than 0.5 might result in greater than 1.0 values returned by noise().",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "octaves",
            "description": "Number of octaves to be used by the noise() function.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "fallout",
            "description": "Falloff factor for each octave.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.noiseDetail(octaves, fallout)"
      },
      {
        "name": "noiseSeed",
        "description": "Sets the seed value for noise(). By default, noise() produces different results each time the program is run. Set the value parameter to a constant to return the same pseudo-random numbers each time the software is run.",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "seed",
            "description": "Noise seed value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.noiseSeed(seed)"
      }
    ],
    "subcat": "Random"
  },
  {
    "entries": [
      {
        "name": "Array.filter",
        "description": "The ",
        "returns": {
          "name": null,
          "description": "The new array with the elements that pass the test.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "Array",
        "parameters": [
          {
            "name": "callback",
            "description": "The Function is a predicate, to test each element of the array. Return true to keep the element, false otherwise.",
            "optional": false,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/filter\">filter()</a> method creates a new array with all elements that pass the test implemented by the provided function."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Array.filter(callback)"
      },
      {
        "name": "Array.map",
        "description": "The ",
        "returns": {
          "name": null,
          "description": "The new array with each element being the result of the callback function.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "Array",
        "parameters": [
          {
            "name": "callback",
            "description": "Function that produces an element of the new Array.",
            "optional": false,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\">map()</a> method creates a new array with the results of calling a provided function on every element in this array."
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Array.map(callback)"
      },
      {
        "name": "Array.forEach",
        "description": "Used to run a function on all elements of an array. Please note the existance of the convenience methods b.stories(), b.paragraphs(), b.lines(), b.words() and b.characters() that are used to iterate through all instances of the given type in the given document.",
        "returns": null,
        "category": "Data",
        "subcategory": "Array",
        "parameters": [
          {
            "name": "collection",
            "description": "The array to be processed.",
            "optional": false,
            "type": [
              "Array"
            ]
          },
          {
            "name": "cb",
            "description": "The function that will be called on each element. The call will be like function(item,i) where i is the current index of the item within the array.",
            "optional": false,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Array.forEach(collection, cb)"
      }
    ],
    "subcat": "Array"
  },
  {
    "entries": [
      {
        "name": "HashList",
        "description": "HashList is a data container that allows you to store information as key - value pairs. As usual in JavaScript mixed types of keys and values are accepted in one HashList instance.",
        "returns": null,
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList()"
      },
      {
        "name": "HashList.remove",
        "description": "This removes a key - value pair by its key.",
        "returns": {
          "name": null,
          "description": "The value before deletion.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to delete.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.remove(key)"
      },
      {
        "name": "HashList.get",
        "description": "This gets a value by its key.",
        "returns": {
          "name": null,
          "description": "The value.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to look for.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.get(key)"
      },
      {
        "name": "HashList.set",
        "description": "This sets a key - value pair. If a key is already existing, the value will be updated. Please note that Functions are currently not supported as values.",
        "returns": {
          "name": null,
          "description": "The value after setting.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to use.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "value",
            "description": "The value to set.",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.set(key, value)"
      },
      {
        "name": "HashList.hasKey",
        "description": "Checks for the existence of a given key.",
        "returns": {
          "name": null,
          "description": "Returns true or false.",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to check.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.hasKey(key)"
      },
      {
        "name": "HashList.hasValue",
        "description": "Checks if a certain value exists at least once in all of the key - value pairs.",
        "returns": {
          "name": null,
          "description": "Returns true or false.",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "value",
            "description": "The value to check.",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.hasValue(value)"
      },
      {
        "name": "HashList.getKeysByValues",
        "description": "Returns an array of all keys that are sorted by their values from highest to lowest. Please note that this only works if you have conistently used Numbers for values.",
        "returns": {
          "name": null,
          "description": "An array with all the keys.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.getKeysByValues()"
      },
      {
        "name": "HashList.getSortedKeys",
        "description": "Returns an array with all keys in a sorted order from higher to lower magnitude.",
        "returns": {
          "name": null,
          "description": "An array with all the keys sorted.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.getSortedKeys()"
      },
      {
        "name": "HashList.getKeys",
        "description": "Returns an array with all keys.",
        "returns": {
          "name": null,
          "description": "An array with all the keys.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.getKeys()"
      },
      {
        "name": "HashList.getValues",
        "description": "Returns an array with all values.",
        "returns": {
          "name": null,
          "description": "An array with all the values.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.getValues()"
      },
      {
        "name": "HashList.clear",
        "description": "Deletes all the key - value pairs in this HashList.",
        "returns": null,
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.HashList.clear()"
      }
    ],
    "subcat": "HashList"
  },
  {
    "entries": [
      {
        "name": "CSV.delimiter",
        "description": "Sets the delimiter of the CSV decode and encode function.",
        "returns": {
          "name": null,
          "description": "Returns the current delimiter if called without argument",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "CSV",
        "parameters": [
          {
            "name": "delimiter",
            "description": "Optional Sets the delimiter for CSV parsing",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CSV.delimiter([delimiter])"
      },
      {
        "name": "CSV.decode",
        "description": "Function parses a string as CSV-object Array. Usage:\nvar arr = b.CSV.decode(str);\nvar str = b.CSV.encode(arr);",
        "returns": {
          "name": null,
          "description": "Returns CSV-object Array",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "CSV",
        "parameters": [
          {
            "name": "String",
            "description": "to be parsed as CSV-object.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CSV.decode(String)"
      },
      {
        "name": "CSV.encode",
        "description": "Function convert an javascript array of objects to a CSV-string. Usage:\nvar str = b.CSV.encode(arr);\nvar arr = b.CSV.decode(str);",
        "returns": {
          "name": null,
          "description": "Returns CSV-string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "CSV",
        "parameters": [
          {
            "name": "Array",
            "description": "to be converted to a CSV-string",
            "optional": false,
            "type": [
              "Array"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.CSV.encode(Array)"
      }
    ],
    "subcat": "CSV"
  },
  {
    "entries": [
      {
        "name": "isArray",
        "description": "Checks whether a var is an Array, returns true if this is the case",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "obj",
            "description": "The object to check",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.isArray(obj)"
      },
      {
        "name": "isNumber",
        "description": "Checks whether a var is a number, returns true if this is the case",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "num",
            "description": "The number to check",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.isNumber(num)"
      },
      {
        "name": "isString",
        "description": "Checks whether a var is a string, returns true if this is the case",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "str",
            "description": "The string to check",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.isString(str)"
      },
      {
        "name": "isText",
        "description": "Checks whether a var is an indesign text object, returns true if this is the case\nNB: a indesign TextFrame will return false as it is just a container holding text.\nSo you could say that isText() refers to all the things inside a TextFrame.",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Document",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "obj",
            "description": "The object to check",
            "optional": false,
            "type": [
              "Character",
              "InsertionPoint",
              "Line",
              "Paragraph",
              "TextColumn",
              "TextStyleRange",
              "Word"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.isText(obj)"
      }
    ],
    "subcat": "Type-Check"
  },
  {
    "entries": [
      {
        "name": "projectFolder",
        "description": "Get the folder of the active document as a Folder object. Use .absoluteURI to access a string representation of the folder path.",
        "returns": {
          "name": null,
          "description": "The folder of the the active document",
          "type": [
            "Folder"
          ]
        },
        "category": "Document",
        "subcategory": "Misc",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.projectFolder()"
      }
    ],
    "subcat": "Misc"
  },
  {
    "entries": [
      {
        "name": "Vector",
        "description": "A class to describe a two or three dimensional vector. This datatype stores two or three variables that are commonly used as a position, velocity, and/or acceleration. Technically, position is a point and velocity and acceleration are vectors, but this is often simplified to consider all three as vectors. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (the object's location, expressed as a point.), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the Vector class.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "x",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the third vector.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector(x, y, [z])"
      },
      {
        "name": "Vector.set",
        "description": "Sets the x, y, and z component of the vector using three separate variables, the data from a Vector, or the values from a float array.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a vector, array or x component.",
            "optional": false,
            "type": [
              "Number",
              "Array",
              "Vector"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.set(v, [y], [z])"
      },
      {
        "name": "Vector.get",
        "description": "Gets a copy of the vector, returns a Vector object.",
        "returns": {
          "name": null,
          "description": "A copy of the vector.",
          "type": [
            "Vector"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.get()"
      },
      {
        "name": "Vector.mag",
        "description": "Calculates the magnitude (length) of the vector and returns the result as a float",
        "returns": {
          "name": null,
          "description": "The length.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.mag()"
      },
      {
        "name": "Vector.add",
        "description": "Adds x, y, and z components to a vector, adds one vector to another.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.add(v, [y], [z])"
      },
      {
        "name": "Vector.sub",
        "description": "Substract x, y, and z components or a full vector from this vector",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.sub(v, [y], [z])"
      },
      {
        "name": "Vector.mult",
        "description": "Multiplies this vector with x, y, and z components or another vector.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.mult(v, [y], [z])"
      },
      {
        "name": "Vector.div",
        "description": "Divides this vector through x, y, and z components or another vector.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.div(v, [y], [z])"
      },
      {
        "name": "Vector.dist",
        "description": "Calculates the distance from this vector to another as x, y, and z components or full vector.",
        "returns": {
          "name": null,
          "description": "The distance.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.dist(v, [y], [z])"
      },
      {
        "name": "Vector.dot",
        "description": "Calculates the dot product from this vector to another as x, y, and z components or full vector.",
        "returns": {
          "name": null,
          "description": "The dot product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.dot(v, [y], [z])"
      },
      {
        "name": "Vector.cross",
        "description": "Calculates the cross product from this vector to another as x, y, and z components or full vector.",
        "returns": {
          "name": null,
          "description": "The cross product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an x component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Optional, the y component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Optional, the z component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.cross(v, [y], [z])"
      },
      {
        "name": "Vector.normalize",
        "description": "Normalizes the length of this vector to 1.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.normalize()"
      },
      {
        "name": "Vector.limit",
        "description": "Normalizes the length of this vector to the given parameter.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "high",
            "description": "The value to scale to.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.limit(high)"
      },
      {
        "name": "Vector.heading",
        "description": "The 2D orientation (heading) of this vector in radian.",
        "returns": {
          "name": null,
          "description": "A radian angle value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.heading()"
      },
      {
        "name": "Vector.toString",
        "description": "Returns data about this vector as a string.",
        "returns": {
          "name": null,
          "description": "The x, y and z components as a string.",
          "type": [
            "String"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.toString()"
      },
      {
        "name": "Vector.array",
        "description": "Returns this vector as an array ",
        "returns": {
          "name": null,
          "description": "The x, y and z components as  an Array of [x,y,z].",
          "type": [
            "Array"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.array()"
      },
      {
        "name": "Vector.dist",
        "description": "Static function. Calculates the Euclidean distance between two points (considering a point as a vector object).\nIs meant to be called \"static\" i.e. Vector.dist(v1, v2);",
        "returns": {
          "name": null,
          "description": "The distance.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.dist(v1, v2)"
      },
      {
        "name": "Vector.dot",
        "description": "Static function. Calculates the dot product of two vectors.\nIs meant to be called \"static\" i.e. Vector.dot(v1, v2);",
        "returns": {
          "name": null,
          "description": "The dot product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.dot(v1, v2)"
      },
      {
        "name": "Vector.cross",
        "description": "Static function. Calculates the cross product of two vectors.\nIs meant to be called \"static\" i.e. Vector.cross(v1, v2);",
        "returns": {
          "name": null,
          "description": "The cross product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.cross(v1, v2)"
      },
      {
        "name": "Vector.angleBetween",
        "description": "Static function. Calculates the angle between two vectors.\nIs meant to be called \"static\" i.e. Vector.angleBetween(v1, v2);",
        "returns": {
          "name": null,
          "description": "The angle.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "codetitle": "b.Vector.angleBetween(v1, v2)"
      }
    ],
    "subcat": "Vector"
  }
]
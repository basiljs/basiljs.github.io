[
  {
    "entries": [
      {
        "name": "blendMode",
        "description": "Sets the Effects blendMode property of an object.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The object to set blendMode of.",
            "optional": false,
            "type": [
              "Object"
            ]
          },
          {
            "name": "blendMode",
            "description": "The blendMode must be one of the InDesign BlendMode enum values:\n  - `BlendMode.NORMAL`\n  - `BlendMode.MULTIPLY`\n  - `BlendMode.SCREEN`\n  - `BlendMode.OVERLAY`\n  - `BlendMode.SOFT_LIGHT`\n  - `BlendMode.HARD_LIGHT`\n  - `BlendMode.COLOR_DODGE`\n  - `BlendMode.COLOR_BURN`\n  - `BlendMode.DARKEN`\n  - `BlendMode.LIGHTEN`\n  - `BlendMode.DIFFERENCE`\n  - `BlendMode.EXCLUSION`\n  - `BlendMode.HUE`\n  - `BlendMode.SATURATION`\n  - `BlendMode.COLOR`\n  - `BlendMode.LUMINOSITY`",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the Effects blendMode property of an object."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "blendMode(obj, blendMode)"
      },
      {
        "name": "color",
        "description": "Creates a new RGB / CMYK color and adds it to the document, or gets a color by name from the document. The default color mode is RGB.",
        "returns": {
          "name": null,
          "description": "Found or new color",
          "type": [
            "Color"
          ]
        },
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "Get",
            "description": "color: the color name. Create new color: GRAY,[name] / R,G,B,[name] / C,M,Y,K,[name]. Name is always optional.",
            "optional": false,
            "type": [
              "String",
              "Numbers"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Creates a new RGB / CMYK color and adds it to the document, or gets a color by name from the document. The default color mode is RGB."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "color(Get)"
      },
      {
        "name": "colorMode",
        "description": "Sets the colormode for creating new colors with color() to RGB or CMYK. The default color mode is RGB.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "colorMode",
            "description": "RGB or CMYK.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the colormode for creating new colors with color() to RGB or CMYK. The default color mode is RGB."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "colorMode(colorMode)"
      },
      {
        "name": "fill",
        "description": "Sets the color or gradient used to fill shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "fillColor",
            "description": "Accepts a color/gradient/swatch as string name or variable. Or values: GRAY / R,G,B / C,M,Y,K.",
            "optional": false,
            "type": [
              "Color",
              "Gradient",
              "Swatch",
              "Numbers",
              "String"
            ]
          },
          {
            "name": "name",
            "description": "If created with numbers, a custom swatch name can be given.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the color or gradient used to fill shapes."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "fill(fillColor, [name])"
      },
      {
        "name": "fillTint",
        "description": "Sets the tint of the color used to fill shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "tint",
            "description": "Number from 0 to 100",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the tint of the color used to fill shapes."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "fillTint(tint)"
      },
      {
        "name": "gradient",
        "description": "Creates a new gradient and adds it to the document, or gets a gradient by name from the document.\nIf two colors are given as the first two parameters, a gradient is created that blends between these two colors. If an array of colors is used as the first parameter, a gradient with the contained colors will be created. The colors will be distributed evenly. If additionally to this array a second array of gradient stop positions is given, the colors will be positioned at the given gradient stops. Possible gradient stop positions range from 0 to 100. All parameter options allow for an additional name parameter at the end to name the new gradient. If a string is used as the only parameter, the gradient with that name will be returned, if it exists in the document.",
        "returns": {
          "name": null,
          "description": "Found or new gradient",
          "type": [
            "Gradient"
          ]
        },
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "c1",
            "description": "First color of the gradient. Alternatively: Array of colors/gradients or name of gradient to get.",
            "optional": false,
            "type": [
              "Color",
              "Array",
              "String"
            ]
          },
          {
            "name": "c2",
            "description": "Second color of the gradient. Alternatively: Array of gradient stop positions (if first parameter is an array of colors).",
            "optional": false,
            "type": [
              "Color",
              "Array",
              "String"
            ]
          },
          {
            "name": "name",
            "description": "Optional name of the gradient.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Creates a new gradient and adds it to the document, or gets a gradient by name from the document.\nIf two colors are given as the first two parameters, a gradient is created that blends between these two colors. If an array of colors is used as the first parameter, a gradient with the contained colors will be created. The colors will be distributed evenly. If additionally to this array a second array of gradient stop positions is given, the colors will be positioned at the given gradient stops. Possible gradient stop positions range from 0 to 100. All parameter options allow for an additional name parameter at the end to name the new gradient. If a string is used as the only parameter, the gradient with that name will be returned, if it exists in the document."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "gradient(c1, c2, [name])"
      },
      {
        "name": "gradientMode",
        "description": "Sets the gradient mode for gradient() to `LINEAR` or `RADIAL`. The default gradient mode is `LINEAR`.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "gradientMode",
            "description": "`LINEAR` or `RADIAL`.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the gradient mode for gradient() to `LINEAR` or `RADIAL`. The default gradient mode is `LINEAR`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "gradientMode(gradientMode)"
      },
      {
        "name": "lerpColor",
        "description": "Calculates a color or colors between two colors at a specific increment.\nThe `amt` parameter is the amount to interpolate between the two values where 0.0 equals the first color, 0.5 is half-way in between and 1.0 equals the second color. N.B.: Both colors must be either CMYK or RGB.",
        "returns": {
          "name": null,
          "description": "Interpolated color",
          "type": [
            "Color"
          ]
        },
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "c1",
            "description": "Input color 1.",
            "optional": false,
            "type": [
              "Color"
            ]
          },
          {
            "name": "c2",
            "description": "Input color 2.",
            "optional": false,
            "type": [
              "Color"
            ]
          },
          {
            "name": "amt",
            "description": "The amount to interpolate between the two colors.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates a color or colors between two colors at a specific increment.\nThe `amt` parameter is the amount to interpolate between the two values where 0.0 equals the first color, 0.5 is half-way in between and 1.0 equals the second color. N.B.: Both colors must be either CMYK or RGB."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "lerpColor(c1, c2, amt)"
      },
      {
        "name": "noFill",
        "description": "Disables filling geometry. If both `noStroke()` and `noFill()` are called, newly drawn shapes will be invisible.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Disables filling geometry. If both `noStroke()` and `noFill()` are called, newly drawn shapes will be invisible."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "noFill()"
      },
      {
        "name": "noStroke",
        "description": "Disables drawing the stroke. If both noStroke() and noFill() are called, newly drawn shapes will be invisible.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Disables drawing the stroke. If both noStroke() and noFill() are called, newly drawn shapes will be invisible."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "noStroke()"
      },
      {
        "name": "opacity",
        "description": "Sets the opacity property of an object.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The object to set opacity of.",
            "optional": false,
            "type": [
              "Object"
            ]
          },
          {
            "name": "opacity",
            "description": "The opacity value from 0 to 100.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the opacity property of an object."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "opacity(obj, opacity)"
      },
      {
        "name": "stroke",
        "description": "Sets the color or gradient used to draw lines and borders around shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "strokeColor",
            "description": "Accepts a color/gradient/swatch as string name or variable. Or values: GRAY / R,G,B / C,M,Y,K.",
            "optional": false,
            "type": [
              "Color",
              "Gradient",
              "Swatch",
              "Numbers",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the color or gradient used to draw lines and borders around shapes."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "stroke(strokeColor)"
      },
      {
        "name": "strokeTint",
        "description": "Sets the tint of the color used to draw lines and borders around shapes.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "tint",
            "description": "Number from 0 to 100.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the tint of the color used to draw lines and borders around shapes."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "strokeTint(tint)"
      },
      {
        "name": "swatch",
        "description": "Gets a swatch by name.",
        "returns": null,
        "category": "Color",
        "subcategory": null,
        "parameters": [
          {
            "name": "swatchName",
            "description": "Returns the swatch color/gradient for a given name by string.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Gets a swatch by name."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "swatch(swatchName)"
      }
    ],
    "cat": "Color"
  },
  {
    "entries": [
      {
        "name": "forEach",
        "description": "Used to run a function on all elements of an array. `forEach()` calls this callback function on each element of the given array. When the callback function returns false, the loop stops and an array of all elements up to this point is returned.\nPlease note the existence of the convenience methods `stories()`, `paragraphs()`, `lines()`, `words()` and `characters()` that are used to iterate through all instances of the given type in the given document.",
        "returns": {
          "name": null,
          "description": "An array of the input array elements.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "Collections",
        "parameters": [
          {
            "name": "collection",
            "description": "The array to be processed.",
            "optional": false,
            "type": [
              "Array"
            ]
          },
          {
            "name": "cb",
            "description": "The function that will be called on each element. The call will be like `function(item, i)` where `i` is the current index of the item within the array.",
            "optional": false,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Used to run a function on all elements of an array. `forEach()` calls this callback function on each element of the given array. When the callback function returns false, the loop stops and an array of all elements up to this point is returned.\nPlease note the existence of the convenience methods `stories()`, `paragraphs()`, `lines()`, `words()` and `characters()` that are used to iterate through all instances of the given type in the given document."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "forEach(collection, cb)"
      },
      {
        "name": "binary",
        "description": "Converts a byte, char, int, or color to a String containing the equivalent binary notation. For example `color(0, 102, 153, 255)` will convert to the String `\"11111111000000000110011010011001\"`. This function can help make your geeky debugging sessions much happier.",
        "returns": {
          "name": null,
          "description": "A formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "num",
            "description": "value to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "numBits",
            "description": "number of digits to return",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Converts a byte, char, int, or color to a String containing the equivalent binary notation. For example `color(0, 102, 153, 255)` will convert to the String `\"11111111000000000110011010011001\"`. This function can help make your geeky debugging sessions much happier."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "binary(num, [numBits])"
      },
      {
        "name": "hex",
        "description": "Convert a number to a hex representation.",
        "returns": {
          "name": null,
          "description": "The hex representation as a string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "value",
            "description": "The number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "len",
            "description": "The length of the hex number to be created, default: `8`",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Convert a number to a hex representation."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "hex(value, [len])"
      },
      {
        "name": "unbinary",
        "description": "Converts a String representation of a binary number to its equivalent integer value. For example, `unbinary(\"00001000\")` will return `8`.",
        "returns": {
          "name": null,
          "description": "The integer representation",
          "type": [
            "Number"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "binaryString",
            "description": "value to convert",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Converts a String representation of a binary number to its equivalent integer value. For example, `unbinary(\"00001000\")` will return `8`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "unbinary(binaryString)"
      },
      {
        "name": "unhex",
        "description": "Convert a hex representation to a number.",
        "returns": {
          "name": null,
          "description": "The number",
          "type": [
            "Number"
          ]
        },
        "category": "Data",
        "subcategory": "Conversion",
        "parameters": [
          {
            "name": "hex",
            "description": "The hex representation",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Convert a hex representation to a number."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "unhex(hex)"
      },
      {
        "name": "CSV.decode",
        "description": "Function parses a string as CSV-object Array.",
        "returns": {
          "name": null,
          "description": "Returns CSV-object Array",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "CSV",
        "parameters": [
          {
            "name": "String",
            "description": "to be parsed as CSV-object.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Function parses a string as CSV-object Array."
          }
        ],
        "examples": [
          {
            "description": null,
            "code": "var arr = CSV.decode(str);\nvar str = CSV.encode(arr);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "CSV.decode(String)"
      },
      {
        "name": "CSV.delimiter",
        "description": "Sets the delimiter of the CSV decode and encode function.",
        "returns": {
          "name": null,
          "description": "Returns the current delimiter if called without argument",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "CSV",
        "parameters": [
          {
            "name": "delimiter",
            "description": "Optional Sets the delimiter for CSV parsing",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the delimiter of the CSV decode and encode function."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "CSV.delimiter([delimiter])"
      },
      {
        "name": "CSV.encode",
        "description": "Function convert an javascript array of objects to a CSV-string.",
        "returns": {
          "name": null,
          "description": "Returns CSV-string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "CSV",
        "parameters": [
          {
            "name": "Array",
            "description": "to be converted to a CSV-string",
            "optional": false,
            "type": [
              "Array"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Function convert an javascript array of objects to a CSV-string."
          }
        ],
        "examples": [
          {
            "description": null,
            "code": "var str = CSV.encode(arr);\nvar arr = CSV.decode(str);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "CSV.encode(Array)"
      },
      {
        "name": "HashList",
        "description": "HashList is a data container that allows you to store information as key - value pairs. As usual in JavaScript mixed types of keys and values are accepted in one HashList instance.",
        "returns": null,
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "HashList is a data container that allows you to store information as key - value pairs. As usual in JavaScript mixed types of keys and values are accepted in one HashList instance."
          },
          {
            "name": null,
            "title": "class",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList()"
      },
      {
        "name": "HashList.clear",
        "description": "Deletes all the key - value pairs in this HashList.",
        "returns": null,
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Deletes all the key - value pairs in this HashList."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.clear()"
      },
      {
        "name": "HashList.get",
        "description": "This gets a value by its key.",
        "returns": {
          "name": null,
          "description": "The value.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to look for.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "This gets a value by its key."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.get(key)"
      },
      {
        "name": "HashList.getKeys",
        "description": "Returns an array with all keys.",
        "returns": {
          "name": null,
          "description": "An array with all the keys.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns an array with all keys."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.getKeys()"
      },
      {
        "name": "HashList.getKeysByValues",
        "description": "Returns an array of all keys that are sorted by their values from highest to lowest. Please note that this only works if you have conistently used Numbers for values.",
        "returns": {
          "name": null,
          "description": "An array with all the keys.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns an array of all keys that are sorted by their values from highest to lowest. Please note that this only works if you have conistently used Numbers for values."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.getKeysByValues()"
      },
      {
        "name": "HashList.getSortedKeys",
        "description": "Returns an array with all keys in a sorted order from higher to lower magnitude.",
        "returns": {
          "name": null,
          "description": "An array with all the keys sorted.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns an array with all keys in a sorted order from higher to lower magnitude."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.getSortedKeys()"
      },
      {
        "name": "HashList.getValues",
        "description": "Returns an array with all values.",
        "returns": {
          "name": null,
          "description": "An array with all the values.",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns an array with all values."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.getValues()"
      },
      {
        "name": "HashList.hasKey",
        "description": "Checks for the existence of a given key.",
        "returns": {
          "name": null,
          "description": "Returns true or false.",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to check.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks for the existence of a given key."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.hasKey(key)"
      },
      {
        "name": "HashList.hasValue",
        "description": "Checks if a certain value exists at least once in all of the key - value pairs.",
        "returns": {
          "name": null,
          "description": "Returns true or false.",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "value",
            "description": "The value to check.",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks if a certain value exists at least once in all of the key - value pairs."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.hasValue(value)"
      },
      {
        "name": "HashList.remove",
        "description": "This removes a key - value pair by its key.",
        "returns": {
          "name": null,
          "description": "The value before deletion.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to delete.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "This removes a key - value pair by its key."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.remove(key)"
      },
      {
        "name": "HashList.set",
        "description": "This sets a key - value pair. If a key is already existing, the value will be updated. Please note that Functions are currently not supported as values.",
        "returns": {
          "name": null,
          "description": "The value after setting.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "HashList",
        "parameters": [
          {
            "name": "key",
            "description": "The key to use.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "value",
            "description": "The value to set.",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "This sets a key - value pair. If a key is already existing, the value will be updated. Please note that Functions are currently not supported as values."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HashList.set(key, value)"
      },
      {
        "name": "JSON.decode",
        "description": "Function parses and validates a string as JSON-object.",
        "returns": {
          "name": null,
          "description": "Returns JSON-object or throws an error if invalid JSON has been provided.",
          "type": [
            "Object"
          ]
        },
        "category": "Data",
        "subcategory": "JSON",
        "parameters": [
          {
            "name": "String",
            "description": "to be parsed as JSON-object.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Function parses and validates a string as JSON-object."
          }
        ],
        "examples": [
          {
            "description": null,
            "code": "var obj = JSON.decode(str);\nvar str = JSON.encode(obj);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "JSON.decode(String)"
      },
      {
        "name": "JSON.encode",
        "description": "Function convert an javascript object to a JSON-string.",
        "returns": {
          "name": null,
          "description": "Returns JSON-string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "JSON",
        "parameters": [
          {
            "name": "Object",
            "description": "to be converted to a JSON-string",
            "optional": false,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [],
        "examples": [
          {
            "description": null,
            "code": "var str = JSON.encode(obj);\nvar obj = JSON.decode(str);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "JSON.encode(Object)"
      },
      {
        "name": "endsWith",
        "description": "Checks whether a string ends with a specific character or string.",
        "returns": {
          "name": null,
          "description": "Returns either true or false",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "A string to be checked",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "suffix",
            "description": "The string to look for",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a string ends with a specific character or string."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "endsWith(str, suffix)"
      },
      {
        "name": "join",
        "description": "Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to strings using `nf()` or `nfs()`.",
        "returns": {
          "name": null,
          "description": "The joined string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "array",
            "description": "A string array",
            "optional": false,
            "type": [
              "Array"
            ]
          },
          {
            "name": "separator",
            "description": "The separator to be inserted",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to strings using `nf()` or `nfs()`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "join(array, separator)"
      },
      {
        "name": "nf",
        "description": "Utility function for formatting numbers into strings. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.\n\n`nf()` is used to add zeros to the left and/or right of a number. This is typically for aligning a list of numbers. To remove digits from a floating-point number, use the `ceil()`, `floor()`, or `round()` functions.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Utility function for formatting numbers into strings. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.\n\n`nf()` is used to add zeros to the left and/or right of a number. This is typically for aligning a list of numbers. To remove digits from a floating-point number, use the `ceil()`, `floor()`, or `round()` functions."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "nf(value, leftDigits, rightDigits)"
      },
      {
        "name": "nfc",
        "description": "Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are two versions, one for formatting ints and one for formatting an array of ints. The value for the digits parameter should always be a positive integer.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are two versions, one for formatting ints and one for formatting an array of ints. The value for the digits parameter should always be a positive integer."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "nfc(value, leftDigits, rightDigits)"
      },
      {
        "name": "nfp",
        "description": "Utility function for formatting numbers into strings. Similar to `nf()` but puts a `+` in front of positive numbers and a `-` in front of negative numbers. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Utility function for formatting numbers into strings. Similar to `nf()` but puts a `+` in front of positive numbers and a `-` in front of negative numbers. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "nfp(value, leftDigits, rightDigits)"
      },
      {
        "name": "nfs",
        "description": "Utility function for formatting numbers into strings. Similar to `nf()` but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers.",
        "returns": {
          "name": null,
          "description": "The formatted string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "value",
            "description": "The Number to convert",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "leftDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "rightDigits",
            "description": null,
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Utility function for formatting numbers into strings. Similar to `nf()` but leaves a blank space in front of positive numbers so they align with negative numbers in spite of the minus symbol. There are two versions, one for formatting floats and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "nfs(value, leftDigits, rightDigits)"
      },
      {
        "name": "split",
        "description": "The `split()` function breaks a string into pieces using a character or string as the divider. The `delim` parameter specifies the character or characters that mark the boundaries between each piece. An array of strings is returned that contains each of the pieces.\n\nThe `splitTokens()` function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence.",
        "returns": {
          "name": null,
          "description": "Array of strings",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "the String to be split",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "delim",
            "description": "The string used to separate the data",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `split()` function breaks a string into pieces using a character or string as the divider. The `delim` parameter specifies the character or characters that mark the boundaries between each piece. An array of strings is returned that contains each of the pieces.\n\nThe `splitTokens()` function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "split(str, [delim])"
      },
      {
        "name": "splitTokens",
        "description": "The `splitTokens()` function splits a string at one or many character \"tokens.\" The tokens parameter specifies the character or characters to be used as a boundary.\n\nIf no tokens character is specified, any whitespace character is used to split. Whitespace characters include tab (`\\t`), line feed (`\\n`), carriage return (`\\r`), form feed (`\\f`), and space.",
        "returns": {
          "name": null,
          "description": "Array of strings",
          "type": [
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "the String to be split",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "tokens",
            "description": "list of individual characters that will be used as separators",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `splitTokens()` function splits a string at one or many character \"tokens.\" The tokens parameter specifies the character or characters to be used as a boundary.\n\nIf no tokens character is specified, any whitespace character is used to split. Whitespace characters include tab (`\\t`), line feed (`\\n`), carriage return (`\\r`), form feed (`\\f`), and space."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "splitTokens(str, [tokens])"
      },
      {
        "name": "startsWith",
        "description": "Checks whether a string starts with a specific character or string.",
        "returns": {
          "name": null,
          "description": "Returns either true or false",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "A string to be checked",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "prefix",
            "description": "The string to look for",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a string starts with a specific character or string."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "startsWith(str, prefix)"
      },
      {
        "name": "trim",
        "description": "Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode \"nbsp\" character.",
        "returns": {
          "name": null,
          "description": "Returns the input in a trimmed way",
          "type": [
            "String",
            "Array"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "str",
            "description": "A string or an array of strings to be trimmed",
            "optional": false,
            "type": [
              "String",
              "Array"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode \"nbsp\" character."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "trim(str)"
      },
      {
        "name": "trimWord",
        "description": "Removes multiple, leading or trailing spaces and punctuation from \"words\". E.g. converts `\"word!\"` to `\"word\"`. Especially useful together with `words()`;",
        "returns": {
          "name": null,
          "description": "The trimmed string",
          "type": [
            "String"
          ]
        },
        "category": "Data",
        "subcategory": "String Functions",
        "parameters": [
          {
            "name": "s",
            "description": "The String to trim",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Removes multiple, leading or trailing spaces and punctuation from \"words\". E.g. converts `\"word!\"` to `\"word\"`. Especially useful together with `words()`;"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "trimWord(s)"
      },
      {
        "name": "isArray",
        "description": "Checks whether a var is an array, returns `true` if this is the case.",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "obj",
            "description": "The object to check",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a var is an array, returns `true` if this is the case."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "isArray(obj)"
      },
      {
        "name": "isInteger",
        "description": "Checks whether a var is an integer, returns `true` if this is the case.",
        "returns": {
          "name": null,
          "description": "Returns true if the given argument is an integer.",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "num",
            "description": "The number to check.",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a var is an integer, returns `true` if this is the case."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "isInteger(num)"
      },
      {
        "name": "isNumber",
        "description": "Checks whether a var is a number, returns `true if this is the case.",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "num",
            "description": "The number to check",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a var is a number, returns `true if this is the case."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "isNumber(num)"
      },
      {
        "name": "isString",
        "description": "Checks whether a var is a string, returns `true` if this is the case",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "str",
            "description": "The string to check",
            "optional": false,
            "type": [
              "Object",
              "String",
              "Number",
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a var is a string, returns `true` if this is the case"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "isString(str)"
      },
      {
        "name": "isURL",
        "description": "Checks whether an URL string is valid.",
        "returns": {
          "name": null,
          "description": "Returns either true or false",
          "type": [
            "Boolean"
          ]
        },
        "category": "Data",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "url",
            "description": "An url string to be checked",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether an URL string is valid."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "isURL(url)"
      }
    ],
    "cat": "Data"
  },
  {
    "entries": [
      {
        "name": "isText",
        "description": "Checks whether a var is an InDesign text object, returns `true` if this is the case.\nNB: a InDesign text frame will return `false` as it is just a container holding text. So you could say that `isText()` refers to all the things inside a text frame.",
        "returns": {
          "name": null,
          "description": "returns true if this is the case",
          "type": [
            "Boolean"
          ]
        },
        "category": "Document",
        "subcategory": "Type-Check",
        "parameters": [
          {
            "name": "obj",
            "description": "The object to check",
            "optional": false,
            "type": [
              "Character",
              "InsertionPoint",
              "Line",
              "Paragraph",
              "TextColumn",
              "TextStyleRange",
              "Word"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Checks whether a var is an InDesign text object, returns `true` if this is the case.\nNB: a InDesign text frame will return `false` as it is just a container holding text. So you could say that `isText()` refers to all the things inside a text frame."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "isText(obj)"
      },
      {
        "name": "clear",
        "description": "Removes all page items (including locked ones) in the given Document, Page, Layer or Group. If the selected container is a group, the group itself will be removed as well.",
        "returns": null,
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "container",
            "description": "The container where the PageItems sit in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "summary",
            "description": "Removes all page items (including locked ones) in the given Document, Page, Layer or Group."
          },
          {
            "title": "description",
            "description": "Removes all page items (including locked ones) in the given Document, Page, Layer or Group. If the selected container is a group, the group itself will be removed as well."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": "Removes all page items (including locked ones) in the given Document, Page, Layer or Group.",
        "codetitle": "clear(container)"
      },
      {
        "name": "close",
        "description": "Closes the current document. If no `saveOptions` argument is used, the user will be asked if they want to save or not.",
        "returns": null,
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "saveOptions",
            "description": "The InDesign SaveOptions constant or either true for triggering saving before closing or false for closing without saving.",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "file",
            "description": "The InDesign file instance to save the document to.",
            "optional": true,
            "type": [
              "File"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Closes the current document. If no `saveOptions` argument is used, the user will be asked if they want to save or not."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "close([saveOptions], [file])"
      },
      {
        "name": "doc",
        "description": "Sets or possibly creates the current document and returns it. If the `doc` parameter is not given, the current document gets set to the active document in the application. If no document at all is open, a new document gets created.",
        "returns": {
          "name": null,
          "description": "The current document instance.",
          "type": [
            "Document"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "doc",
            "description": "The document to set the current document to.",
            "optional": true,
            "type": [
              "Document"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets or possibly creates the current document and returns it. If the `doc` parameter is not given, the current document gets set to the active document in the application. If no document at all is open, a new document gets created."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "doc([doc])"
      },
      {
        "name": "layer",
        "description": "Returns the current layer if no argument is given. Sets active layer if layer object or name of existing layer is given. Newly creates layer and sets it to active if new name is given.",
        "returns": {
          "name": null,
          "description": "The current layer instance.",
          "type": [
            "Layer"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "layer",
            "description": "The layer or layer name to set the current layer to.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current layer if no argument is given. Sets active layer if layer object or name of existing layer is given. Newly creates layer and sets it to active if new name is given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "layer([layer])"
      },
      {
        "name": "referencePoint",
        "description": "Sets the reference point for transformations using the `transform()` function. The reference point will be used for all following transformations, until it is changed again. By default, the reference point is set to the top left.\nArguments can be the basil constants `TOP_LEFT`, `TOP_CENTER`, `TOP_RIGHT`, `CENTER_LEFT`, `CENTER`, `CENTER_RIGHT`, `BOTTOM_LEFT`, `BOTTOM_CENTER` or `BOTTOM_RIGHT`. Alternatively the digits `1` through `9` (as they are arranged on a num pad) can be used to set the anchor point. Lastly the function can also use an InDesign anchor point enumerator to set the reference point.\nIf the function is used without any arguments the currently set reference point will be returned.",
        "returns": {
          "name": null,
          "description": "Current reference point setting.",
          "type": [
            "String"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "referencePoint",
            "description": "The reference point to set.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the reference point for transformations using the `transform()` function. The reference point will be used for all following transformations, until it is changed again. By default, the reference point is set to the top left.\nArguments can be the basil constants `TOP_LEFT`, `TOP_CENTER`, `TOP_RIGHT`, `CENTER_LEFT`, `CENTER`, `CENTER_RIGHT`, `BOTTOM_LEFT`, `BOTTOM_CENTER` or `BOTTOM_RIGHT`. Alternatively the digits `1` through `9` (as they are arranged on a num pad) can be used to set the anchor point. Lastly the function can also use an InDesign anchor point enumerator to set the reference point.\nIf the function is used without any arguments the currently set reference point will be returned."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "referencePoint([referencePoint])"
      },
      {
        "name": "remove",
        "description": "Removes the provided Page, Layer, PageItem, Swatch, etc.",
        "returns": null,
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "The object to be removed.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Removes the provided Page, Layer, PageItem, Swatch, etc."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "remove(obj)"
      },
      {
        "name": "revert",
        "description": "Reverts the document to its last saved state. If the current document is not saved yet, this function will close the document without saving it and reopen a fresh document so as to \"revert\" the unsaved document. This function is helpful during development stage to start from a new or default document each time the script is run.",
        "returns": {
          "name": null,
          "description": "The reverted document.",
          "type": [
            "Document"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Reverts the document to its last saved state. If the current document is not saved yet, this function will close the document without saving it and reopen a fresh document so as to \"revert\" the unsaved document. This function is helpful during development stage to start from a new or default document each time the script is run."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "revert()"
      },
      {
        "name": "units",
        "description": "Sets the units of the document (like right clicking the rulers). By default basil uses the units of the user's document or the user's default units.",
        "returns": {
          "name": null,
          "description": "Current unit setting.",
          "type": [
            "String"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "units",
            "description": "Supported units: PT, PX, CM, MM or IN.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the units of the document (like right clicking the rulers). By default basil uses the units of the user's document or the user's default units."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "units([units])"
      },
      {
        "name": "bleeds",
        "description": "Sets the document bleeds. If one value is given, all 4 are set equally. If 4 values are given, the top/right/bottom/left document bleeds will be adjusted. Calling the function without any values, will return the document bleed settings.",
        "returns": {
          "name": null,
          "description": "Current document bleeds settings.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Canvas",
        "parameters": [
          {
            "name": "top",
            "description": "Top bleed or all if only one.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "right",
            "description": "Right bleed.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "bottom",
            "description": "Bottom bleed.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "left",
            "description": "Left bleed.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the document bleeds. If one value is given, all 4 are set equally. If 4 values are given, the top/right/bottom/left document bleeds will be adjusted. Calling the function without any values, will return the document bleed settings."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "bleeds([top], [right], [bottom], [left])"
      },
      {
        "name": "canvasMode",
        "description": "Use this to set the dimensions of the canvas. Choose between `PAGE` (default), `MARGIN`, `BLEED` resp. `FACING_PAGES`, `FACING_MARGINS` and `FACING_BLEEDS` for book setups with facing page. Please note: Setups with more than two facing pages are not yet supported.\nPlease note that you will loose your current MatrixTransformation. You should set the canvasMode before you attempt to use `translate()`, `rotate()` and `scale()`.",
        "returns": {
          "name": null,
          "description": "The current canvas mode.",
          "type": [
            "String"
          ]
        },
        "category": "Document",
        "subcategory": "Canvas",
        "parameters": [
          {
            "name": "mode",
            "description": "The canvas mode to set.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Use this to set the dimensions of the canvas. Choose between `PAGE` (default), `MARGIN`, `BLEED` resp. `FACING_PAGES`, `FACING_MARGINS` and `FACING_BLEEDS` for book setups with facing page. Please note: Setups with more than two facing pages are not yet supported.\nPlease note that you will loose your current MatrixTransformation. You should set the canvasMode before you attempt to use `translate()`, `rotate()` and `scale()`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "canvasMode(mode)"
      },
      {
        "name": "guideX",
        "description": "Creates a vertical guide line at the current spread and current layer.",
        "returns": {
          "name": null,
          "description": "New guide line.",
          "type": [
            "Guide"
          ]
        },
        "category": "Document",
        "subcategory": "Canvas",
        "parameters": [
          {
            "name": "x",
            "description": "Position of the new guide line.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Creates a vertical guide line at the current spread and current layer."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "guideX(x)"
      },
      {
        "name": "guideY",
        "description": "Creates a horizontal guide line at the current spread and current layer.",
        "returns": {
          "name": null,
          "description": "New guide line.",
          "type": [
            "Guide"
          ]
        },
        "category": "Document",
        "subcategory": "Canvas",
        "parameters": [
          {
            "name": "y",
            "description": "Position of the new guide line.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Creates a horizontal guide line at the current spread and current layer."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "guideY(y)"
      },
      {
        "name": "margins",
        "description": "Sets the margins of a given page. If 1 value is given, all 4 sides are set equally. If 4 values are given, the current page will be adjusted. Adding a 5th value will set the margin of a given page. Calling the function without any values, will return the margins for the current page.",
        "returns": {
          "name": null,
          "description": "Current page margins with the properties: `top`, `right`, `bottom`, `left`.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Canvas",
        "parameters": [
          {
            "name": "top",
            "description": "Top margin or all if only one.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "right",
            "description": "Right margin.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "bottom",
            "description": "Bottom margin.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "left",
            "description": "Left margin.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "pageNumber",
            "description": "Sets margins to selected page, currentPage() if left blank.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the margins of a given page. If 1 value is given, all 4 sides are set equally. If 4 values are given, the current page will be adjusted. Adding a 5th value will set the margin of a given page. Calling the function without any values, will return the margins for the current page."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "margins([top], [right], [bottom], [left], [pageNumber])"
      },
      {
        "name": "pasteboard",
        "description": "Returns the current horizontal and vertical pasteboard margins and sets them if both arguements are given.",
        "returns": {
          "name": null,
          "description": "The current horizontal, vertical pasteboard margins.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Canvas",
        "parameters": [
          {
            "name": "h",
            "description": "The desired horizontal pasteboard margin.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "v",
            "description": "The desired vertical pasteboard margin.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current horizontal and vertical pasteboard margins and sets them if both arguements are given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "pasteboard(h, v)"
      },
      {
        "name": "addPage",
        "description": "Adds a new page to the document. Set the optional location parameter to either `AT_END` (default), `AT_BEGINNING`, `AFTER` or `BEFORE`. `AFTER` and `BEFORE` will use the current page as insertion point.",
        "returns": {
          "name": null,
          "description": "The new page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "location",
            "description": "The location placement mode.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Adds a new page to the document. Set the optional location parameter to either `AT_END` (default), `AT_BEGINNING`, `AFTER` or `BEFORE`. `AFTER` and `BEFORE` will use the current page as insertion point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "addPage([location])"
      },
      {
        "name": "applyMasterPage",
        "description": "Applies a master page to the given page.\n\nThe `page` parameter can be given as a page object, as a page name or as a page number (numbering starts at 1).\n\nThe `master` parameter can be given as a master spread object or as a string. If a string is used, it can either hold the master page prefix (e.g \"A\", \"B\") or the full name *including* the prefix (e.g \"A-Master\", \"B-Master\"). The latter is useful, if there are several masters using the same prefix. Alternatively, the constant `NONE` can be used to apply InDesign's `[none]` master to the page and thus remove the previously applied master page from the page.",
        "returns": {
          "name": null,
          "description": "The page the master page was applied to.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "page",
            "description": "The page to apply the master page to.",
            "optional": false,
            "type": [
              "Number",
              "String",
              "Page"
            ]
          },
          {
            "name": "master",
            "description": "The master page to apply.",
            "optional": false,
            "type": [
              "String",
              "MasterSpread"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Applies a master page to the given page.\n\nThe `page` parameter can be given as a page object, as a page name or as a page number (numbering starts at 1).\n\nThe `master` parameter can be given as a master spread object or as a string. If a string is used, it can either hold the master page prefix (e.g \"A\", \"B\") or the full name *including* the prefix (e.g \"A-Master\", \"B-Master\"). The latter is useful, if there are several masters using the same prefix. Alternatively, the constant `NONE` can be used to apply InDesign's `[none]` master to the page and thus remove the previously applied master page from the page."
          }
        ],
        "examples": [
          {
            "description": "Apply the master with prefix \"B\" to the documents third page",
            "code": "applyMasterPage(3, \"B\");"
          },
          {
            "description": "In a document with master pages \"A-Text\" and \"A-Images\", apply \"A-Images\" to the current page",
            "code": "applyMasterPage(page(), \"A-Images\");"
          },
          {
            "description": "Remove the master page from the page named \"IV\"",
            "code": "applyMasterPage(\"IV\", NONE);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "applyMasterPage(page, master)"
      },
      {
        "name": "masterPage",
        "description": "Sets a master page to be the active page. This can be used to set up and arrange page items on master pages, so they appear throughout the entire document.\n\nThe `master` parameter describes the master spread that contains the master page. It can be given as a master spread object or as a string. If a string is used, it can either hold the master page prefix (e.g \"A\", \"B\") or the full name *including* the prefix (e.g \"A-Master\", \"B-Master\"). The latter is useful, if there are several masters using the same prefix.\n\nAs master pages cannot directly be targeted by number, the optional `pageIndex` parameter can be used to specify which master page of the given master spread should be set as the active page, in case there are several pages on the master spread. Counting starts from 0, beginning from the leftmost page. If the `pageIndex` parameter is not given, the first page of the master spread is returned.",
        "returns": {
          "name": null,
          "description": "The active master page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "master",
            "description": "The master spread that contains the master page.",
            "optional": false,
            "type": [
              "String",
              "MasterSpread"
            ]
          },
          {
            "name": "pageIndex",
            "description": "The index of the page on the master spread, counting from 0.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets a master page to be the active page. This can be used to set up and arrange page items on master pages, so they appear throughout the entire document.\n\nThe `master` parameter describes the master spread that contains the master page. It can be given as a master spread object or as a string. If a string is used, it can either hold the master page prefix (e.g \"A\", \"B\") or the full name *including* the prefix (e.g \"A-Master\", \"B-Master\"). The latter is useful, if there are several masters using the same prefix.\n\nAs master pages cannot directly be targeted by number, the optional `pageIndex` parameter can be used to specify which master page of the given master spread should be set as the active page, in case there are several pages on the master spread. Counting starts from 0, beginning from the leftmost page. If the `pageIndex` parameter is not given, the first page of the master spread is returned."
          }
        ],
        "examples": [
          {
            "description": "Set master page to be the first page of master \"A\".",
            "code": "masterPage(\"A\");"
          },
          {
            "description": "Set master page to be the second page of master \"B\".",
            "code": "masterPage(\"B\", 1);"
          },
          {
            "description": "Alternate way to set master page ot the second page of master \"B\".",
            "code": "masterPage(\"B\");\nnextPage();"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "masterPage(master, [pageIndex])"
      },
      {
        "name": "nextPage",
        "description": "Set the next page of the document to be the active one and returns the new active page. If the current page is the last page or the last master page, this page will be returned.",
        "returns": {
          "name": null,
          "description": "The active page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Set the next page of the document to be the active one and returns the new active page. If the current page is the last page or the last master page, this page will be returned."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "nextPage()"
      },
      {
        "name": "page",
        "description": "Returns the current page and sets it if argument page is given. If page is given as string, the page will be set to the page with this name (e.g. \"4\", \"04\", \"D\", \"IV\"). If the page is given as an integer, the page will be set to the page according to this number, no matter the actual naming of the page. Numbering starts with 1 in this case. If you pass a page item the current page will be set to its containing page. If this page item is off the page (on the pasteboard) the current page will be set to the first page of its containing spread.",
        "returns": {
          "name": null,
          "description": "The current page instance.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "page",
            "description": "The page number (as integer), page name or page object to set the current page to or an page item to refer to its containing page.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current page and sets it if argument page is given. If page is given as string, the page will be set to the page with this name (e.g. \"4\", \"04\", \"D\", \"IV\"). If the page is given as an integer, the page will be set to the page according to this number, no matter the actual naming of the page. Numbering starts with 1 in this case. If you pass a page item the current page will be set to its containing page. If this page item is off the page (on the pasteboard) the current page will be set to the first page of its containing spread."
          }
        ],
        "examples": [
          {
            "description": "Sets the current page to the third page of the document",
            "code": "page(3);"
          },
          {
            "description": "Sets the current page to the page named \"004\"",
            "code": "page(\"004\");"
          },
          {
            "description": "Sets the current page to the containing page of a rectangle",
            "code": "var myRect = rect(100, 100, 200, 200);\npage(myRect);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "page([page])"
      },
      {
        "name": "pageCount",
        "description": "Returns the number of all pages in the current document. If a number is given as an argument, it will set the document's page count to the given number by either adding pages or removing pages until the number is reached. If pages are added, the master page of the document's last page will be applied to the new pages.",
        "returns": {
          "name": null,
          "description": "The amount of pages.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "pageCount",
            "description": "New page count of the document (integer between 1 and 9999).",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the number of all pages in the current document. If a number is given as an argument, it will set the document's page count to the given number by either adding pages or removing pages until the number is reached. If pages are added, the master page of the document's last page will be applied to the new pages."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "pageCount([pageCount])"
      },
      {
        "name": "pageNumber",
        "description": "Returns the current page number of either the current page or the given page name or page object. Numbering of pages starts at 1. Master pages have no real numbering and will return -1 instead.",
        "returns": {
          "name": null,
          "description": "The page number within the document.",
          "type": [
            "Number"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "page",
            "description": "The page name or page object of the page you want to know the number of.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current page number of either the current page or the given page name or page object. Numbering of pages starts at 1. Master pages have no real numbering and will return -1 instead."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "pageNumber([page])"
      },
      {
        "name": "previousPage",
        "description": "Set the previous page of the document to be the active one and returns the new active page. If the current page is the first page or the first master page, this page will be returned.",
        "returns": {
          "name": null,
          "description": "The active page.",
          "type": [
            "Page"
          ]
        },
        "category": "Document",
        "subcategory": "Page",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Set the previous page of the document to be the active one and returns the new active page. If the current page is the first page or the first master page, this page will be returned."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "previousPage()"
      },
      {
        "name": "removePage",
        "description": "Removes a page from the current document. This will either be the current page if the parameter page is left empty, or the given page object or the page of a specific number or name.",
        "returns": null,
        "category": "Document",
        "subcategory": "Page",
        "parameters": [
          {
            "name": "page",
            "description": "The page to be removed as page number, page name or page object.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Removes a page from the current document. This will either be the current page if the parameter page is left empty, or the given page object or the page of a specific number or name."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "removePage([page])"
      },
      {
        "name": "applyObjectStyle",
        "description": "Applies an object style to the given page item. The object style can be given as name or as an object style instance.",
        "returns": {
          "name": null,
          "description": "The page item that the style was applied to.",
          "type": [
            "PageItem"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "item",
            "description": "The page item to apply the style to.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "style",
            "description": "An object style instance or the name of the object style to apply.",
            "optional": false,
            "type": [
              "ObjectStyle",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Applies an object style to the given page item. The object style can be given as name or as an object style instance."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "applyObjectStyle(item, style)"
      },
      {
        "name": "arrange",
        "description": "Arranges a page item or a layer before or behind other page items or layers. If using the constants `FORWARD` or `BACKWARD` the object is sent forward or back one step. The constants `FRONT` or `BACK` send the object to the very front or very back. Using `FRONT` or `BACK` together with the optional reference object, sends the object in front or behind this reference object.",
        "returns": {
          "name": null,
          "description": "The newly arranged page item or layer.",
          "type": [
            "PageItem",
            "Layer"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "pItemOrLayer",
            "description": "The page item or layer to be moved to a new position.",
            "optional": false,
            "type": [
              "PageItem",
              "Layer"
            ]
          },
          {
            "name": "positionOrDirection",
            "description": "The position or direction to move the page item or layer. Can be `FRONT`, `BACK`, `FORWARD` or `BACKWARD`.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "reference",
            "description": "A reference object to move the page item or layer behind or in front of.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Arranges a page item or a layer before or behind other page items or layers. If using the constants `FORWARD` or `BACKWARD` the object is sent forward or back one step. The constants `FRONT` or `BACK` send the object to the very front or very back. Using `FRONT` or `BACK` together with the optional reference object, sends the object in front or behind this reference object."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "arrange(pItemOrLayer, positionOrDirection, [reference])"
      },
      {
        "name": "bounds",
        "description": "The function calculates the geometric bounds of any given page item or text. Use the `transforms()` function to modify page items. In case the object is any kind of text, additional typographic information `baseline` and `xHeight` are calculated.",
        "returns": {
          "name": null,
          "description": "Geometric bounds object with these properties: `width`, `height`, `left`, `right`, `top`, `bottom` and for text: `baseline`, `xHeight`.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "obj",
            "description": "The page item or text to calculate the geometric bounds.",
            "optional": false,
            "type": [
              "PageItem",
              "Text"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The function calculates the geometric bounds of any given page item or text. Use the `transforms()` function to modify page items. In case the object is any kind of text, additional typographic information `baseline` and `xHeight` are calculated."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "bounds(obj)"
      },
      {
        "name": "duplicate",
        "description": "Duplicates the given page after the current page or the given page item to the current page and layer. Use `rectMode()` to set center point.",
        "returns": {
          "name": null,
          "description": "The new page item or page.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "item",
            "description": "The page item or page to duplicate.",
            "optional": false,
            "type": [
              "PageItem",
              "Page"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Duplicates the given page after the current page or the given page item to the current page and layer. Use `rectMode()` to set center point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "duplicate(item)"
      },
      {
        "name": "graphics",
        "description": "Returns a collection of all graphics in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object. This function can be used to get the graphic within a graphic frame and move it independently of its parent frame.\nIf a callback function is given, `graphics()` calls this callback function on each graphic of the given container. When the callback function returns false, the loop stops and the `graphics()` function returns an array of all graphics up to this point.",
        "returns": {
          "name": null,
          "description": "An array of Graphics.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story, page item or text object to iterate the graphics in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "PageItem",
              "TextObject"
            ]
          },
          {
            "name": "cb",
            "description": "The callback function to call with each graphic. When this function returns false the loop stops. Passed arguments: `graphic`, `loopCount`.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all graphics in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object. This function can be used to get the graphic within a graphic frame and move it independently of its parent frame.\nIf a callback function is given, `graphics()` calls this callback function on each graphic of the given container. When the callback function returns false, the loop stops and the `graphics()` function returns an array of all graphics up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "graphics(container, [cb])"
      },
      {
        "name": "group",
        "description": "Returns the Group instance and sets it if argument Group is given. Groups items to a new group. Returns the resulting group instance. If a string is given as the only argument, the group by the given name will be returned.",
        "returns": {
          "name": null,
          "description": "The group instance.",
          "type": [
            "Group"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "pItems",
            "description": "An array of page items (must contain at least two items) or name of group instance.",
            "optional": false,
            "type": [
              "Array"
            ]
          },
          {
            "name": "name",
            "description": "The name of the group, only when creating a group from page items.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the Group instance and sets it if argument Group is given. Groups items to a new group. Returns the resulting group instance. If a string is given as the only argument, the group by the given name will be returned."
          },
          {
            "title": "subCat",
            "description": "Page Items"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "group(pItems, [name])"
      },
      {
        "name": "items",
        "description": "Returns a collection of all page items in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object.\nIf a callback function is given, `items()` calls this callback function on each page item of the given container. When the callback function returns false, the loop stops and the `items()` function returns an array of all page items up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of page items.",
          "type": [
            "PageItems",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story, page item or text object instance to iterate the page items in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "PageItem",
              "TextObject"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each page item. When this function returns false the loop stops. Passed arguments: `item`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all page items in the given container. The container object can be a Document, Page, Layer, Group, Story, Page Item or Text Object.\nIf a callback function is given, `items()` calls this callback function on each page item of the given container. When the callback function returns false, the loop stops and the `items()` function returns an array of all page items up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "items(container, [cb])"
      },
      {
        "name": "label",
        "description": "Tags a page item with a given script label in the InDesign Script Label panel (`Window -> Utilities -> Script Label`). If only one argument is given, `label()` returns the first item that is tagged with the given label. Use this instead of `labels()`, when you know you just have one thing with that label and don't want to deal with a single-element array.",
        "returns": {
          "name": null,
          "description": "The tagged page item or the first page item with the given label.",
          "type": [
            "PageItem"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "itemOrLabel",
            "description": "The page item to tag or the label identifier to search for.",
            "optional": false,
            "type": [
              "String",
              "PageItem"
            ]
          },
          {
            "name": "label",
            "description": "The label identifier to tag the page item with.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Tags a page item with a given script label in the InDesign Script Label panel (`Window -> Utilities -> Script Label`). If only one argument is given, `label()` returns the first item that is tagged with the given label. Use this instead of `labels()`, when you know you just have one thing with that label and don't want to deal with a single-element array."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "label(itemOrLabel, label)"
      },
      {
        "name": "labels",
        "description": "Returns items tagged with the given label in the InDesign Script Label pane (`Window -> Utilities -> Script Label`).",
        "returns": {
          "name": null,
          "description": "Array of concrete page item instances, e.g. text frame or spline item.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "label",
            "description": "The label identifier.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "cb",
            "description": "The callback function to call with each item in the search result. When this function returns `false`, the loop stops. Passed arguments: `item`, `loopCount`.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns items tagged with the given label in the InDesign Script Label pane (`Window -> Utilities -> Script Label`)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "labels(label, [cb])"
      },
      {
        "name": "nameOnPage",
        "description": "Returns the first item on the active page that is named by the given name in the Layers pane (`Window -> Layer`).",
        "returns": {
          "name": null,
          "description": "The first object on the active page with the given name.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the first item on the active page that is named by the given name in the Layers pane (`Window -> Layer`)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "nameOnPage()"
      },
      {
        "name": "objectStyle",
        "description": "Returns the object style of a given page item or the object style with the given name. If an object style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the object style's properties.",
        "returns": {
          "name": null,
          "description": "The object style instance.",
          "type": [
            "ObjectStyle"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "itemOrName",
            "description": "A page item whose style to return or the name of the object style to return.",
            "optional": false,
            "type": [
              "PageItem",
              "String"
            ]
          },
          {
            "name": "props",
            "description": "An object of property name/value pairs to set the style's properties.",
            "optional": true,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the object style of a given page item or the object style with the given name. If an object style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the object style's properties."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "objectStyle(itemOrName, [props])"
      },
      {
        "name": "selection",
        "description": "If no argument is given, returns the first currently selected object. If a page item is given as argument, the page item will be selected.",
        "returns": {
          "name": null,
          "description": "The first selected object.",
          "type": [
            "Object"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "item",
            "description": "The page item to select.",
            "optional": true,
            "type": [
              "PageItem"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "If no argument is given, returns the first currently selected object. If a page item is given as argument, the page item will be selected."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "selection([item])"
      },
      {
        "name": "selections",
        "description": "Returns the currently selected object(s)",
        "returns": {
          "name": null,
          "description": "Array of selected object(s).",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Page Items",
        "parameters": [
          {
            "name": "cb",
            "description": "The callback function to call with each item in the selection. When this function returns false the loop stops. Passed arguments: item, loopCount.",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the currently selected object(s)"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "selections([cb])"
      },
      {
        "name": "ungroup",
        "description": "Ungroups an existing group. Returns an array of the items that were within the group before ungroup() was called.",
        "returns": {
          "name": null,
          "description": "An array of the ungrouped page items.",
          "type": [
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": null,
        "parameters": [
          {
            "name": "group",
            "description": "The group instance or name of the group to ungroup.",
            "optional": false,
            "type": [
              "Group",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Ungroups an existing group. Returns an array of the items that were within the group before ungroup() was called."
          },
          {
            "title": "subCat",
            "description": "Page Items"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "ungroup(group)"
      },
      {
        "name": "addToStory",
        "description": "Adds a page item or a string to an existing story. You can control the position of the insert via the last parameter. It accepts either an insertion point or one the following constants: `AT_BEGINNING` and `AT_END`.",
        "returns": null,
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "story",
            "description": "The story.",
            "optional": false,
            "type": [
              "Story"
            ]
          },
          {
            "name": "itemOrString",
            "description": "Either a page item or a string.",
            "optional": false,
            "type": [
              "PageItem",
              "String"
            ]
          },
          {
            "name": "insertionPointOrMode",
            "description": "Insertion point object or one the following constants: `AT_BEGINNING` and `AT_END`.",
            "optional": false,
            "type": [
              "InsertionPoint",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Adds a page item or a string to an existing story. You can control the position of the insert via the last parameter. It accepts either an insertion point or one the following constants: `AT_BEGINNING` and `AT_END`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "addToStory(story, itemOrString, insertionPointOrMode)"
      },
      {
        "name": "characters",
        "description": "Returns a collection of all character objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph, Line or Word.\nIf a callback function is given, `characters()` calls this callback function on each character object of the given container. When the callback function returns false, the loop stops and the `characters()` function returns an array of all characters up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of Character objects.",
          "type": [
            "Characters",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story, textFrame, paragraph, line or word instance to  iterate the characters in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "TextFrame",
              "Paragraph",
              "Line",
              "Word"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each character. When this function returns false the loop stops. Passed arguments: `character`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all character objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph, Line or Word.\nIf a callback function is given, `characters()` calls this callback function on each character object of the given container. When the callback function returns false, the loop stops and the `characters()` function returns an array of all characters up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "characters(container, [cb])"
      },
      {
        "name": "lines",
        "description": "Returns a collection of all line objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame or Paragraph. Please note that `lines()` refers to lines of text in a text frame. If you need to construct a geometric line on a page, use `line()` instead.\nIf a callback function is given, `lines()` calls this callback function on each line object of the given container. When the callback function returns false, the loop stops and the `lines()` function returns an array of all lines up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of Line objects.",
          "type": [
            "Lines",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story, textFrame or paragraph instance to  iterate the lines in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "TextFrame",
              "Paragraph",
              "Line"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each line. When this function returns false the loop stops. Passed arguments: `line`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all line objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame or Paragraph. Please note that `lines()` refers to lines of text in a text frame. If you need to construct a geometric line on a page, use `line()` instead.\nIf a callback function is given, `lines()` calls this callback function on each line object of the given container. When the callback function returns false, the loop stops and the `lines()` function returns an array of all lines up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "lines(container, [cb])"
      },
      {
        "name": "linkTextFrames",
        "description": "Links the stories of two textframes to one story. Text of first textframe overflows to second one.",
        "returns": null,
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "textFrameA",
            "description": null,
            "optional": false,
            "type": [
              "TextFrame"
            ]
          },
          {
            "name": "textFrameB",
            "description": null,
            "optional": false,
            "type": [
              "TextFrame"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Links the stories of two textframes to one story. Text of first textframe overflows to second one."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "linkTextFrames(textFrameA, textFrameB)"
      },
      {
        "name": "paragraphs",
        "description": "Returns a collection of all paragraph objects in the given container. The container object can be a Document, Page, Layer, Group, Story or Text Frame.\nIf a callback function is given, `paragraphs()` calls this callback function on each paragraph object of the given container. When the callback function returns false, the loop stops and the `paragraphs()` function returns an array of all paragraphs up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of Paragraph objects.",
          "type": [
            "Paragraphs",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story or textFrame instance to  iterate the paragraphs in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "TextFrame"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each paragraph. When this function returns false the loop stops. Passed arguments: `paragraph`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all paragraph objects in the given container. The container object can be a Document, Page, Layer, Group, Story or Text Frame.\nIf a callback function is given, `paragraphs()` calls this callback function on each paragraph object of the given container. When the callback function returns false, the loop stops and the `paragraphs()` function returns an array of all paragraphs up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "paragraphs(container, [cb])"
      },
      {
        "name": "placeholder",
        "description": "Fills the given text frame and all linked text frames with random placeholder text. The placeholder text will be added at the end of any already existing text in the text frame.",
        "returns": {
          "name": null,
          "description": "The inserted placeholder text.",
          "type": [
            "Text"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "textFrame",
            "description": "The text frame to fill.",
            "optional": false,
            "type": [
              "TextFrame"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Fills the given text frame and all linked text frames with random placeholder text. The placeholder text will be added at the end of any already existing text in the text frame."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "placeholder(textFrame)"
      },
      {
        "name": "stories",
        "description": "Returns a collection of all story objects in the given document or returns the parent story of a certain element. These elements can be text frames or text objects.\nIf a callback function is given, `stories()` calls this callback function on each story object of the given document or on the parent story of the given element. When the callback function returns false, the loop stops and the `stories()` function returns an array of all stories up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of Story objects.",
          "type": [
            "Stories",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "container",
            "description": "The document instance to iterate the stories in or the element whose parent story to get.",
            "optional": false,
            "type": [
              "Document"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each story. When this function returns false the loop stops. Passed arguments: `story`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all story objects in the given document or returns the parent story of a certain element. These elements can be text frames or text objects.\nIf a callback function is given, `stories()` calls this callback function on each story object of the given document or on the parent story of the given element. When the callback function returns false, the loop stops and the `stories()` function returns an array of all stories up to this point."
          }
        ],
        "examples": [
          {
            "description": null,
            "code": "stories(container(), function(story, loopCount){\n  println(\"Number of words in each Story:\");\n  println(story.words.length);\n});"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "stories(container, [cb])"
      },
      {
        "name": "textStyleRanges",
        "description": "Returns a collection of all text style range objects in the given container. A text style range is a continuous range of identically formatted text (i.e., three consecutive red words in an otherwise black text of the same style would form a text style range). The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph, Line or Word.\nIf a callback function is given, `textStyleRanges()` calls this callback function on each text style range object of the given container. When the callback function returns false, the loop stops and the `textStyleRanges()` function returns an array of all text style ranges up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of TextStyleRange objects.",
          "type": [
            "TextStyleRanges",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story, textFrame, paragraph, line or word instance to iterate the text style ranges in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "TextFrame",
              "Paragraph",
              "Line",
              "Word"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each text style range. When this function returns false the loop stops. Passed arguments: `textStyleRange`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all text style range objects in the given container. A text style range is a continuous range of identically formatted text (i.e., three consecutive red words in an otherwise black text of the same style would form a text style range). The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph, Line or Word.\nIf a callback function is given, `textStyleRanges()` calls this callback function on each text style range object of the given container. When the callback function returns false, the loop stops and the `textStyleRanges()` function returns an array of all text style ranges up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textStyleRanges(container, [cb])"
      },
      {
        "name": "words",
        "description": "Returns a collection of all word objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph or Line.\nIf a callback function is given, `words()` calls this callback function on each word object of the given container. When the callback function returns false, the loop stops and the `words()` function returns an array of all words up to this point.",
        "returns": {
          "name": null,
          "description": "A collection or an array of Word objects.",
          "type": [
            "Words",
            "Array"
          ]
        },
        "category": "Document",
        "subcategory": "Text",
        "parameters": [
          {
            "name": "container",
            "description": "The document, page, layer, group, story, textFrame, paragraph or line instance to iterate the words in.",
            "optional": false,
            "type": [
              "Document",
              "Page",
              "Layer",
              "Group",
              "Story",
              "TextFrame",
              "Paragraph",
              "Line"
            ]
          },
          {
            "name": "cb",
            "description": "Optional: The callback function to call with each word. When this function returns false the loop stops. Passed arguments: `word`, `loopCount`",
            "optional": true,
            "type": [
              "Function"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a collection of all word objects in the given container. The container object can be a Document, Page, Layer, Group, Story, Text Frame, Paragraph or Line.\nIf a callback function is given, `words()` calls this callback function on each word object of the given container. When the callback function returns false, the loop stops and the `words()` function returns an array of all words up to this point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "words(container, [cb])"
      }
    ],
    "cat": "Document"
  },
  {
    "entries": [
      {
        "name": "delay",
        "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "milliseconds",
            "description": "The delay time in milliseconds.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "delay(milliseconds)"
      },
      {
        "name": "frameRate",
        "description": "Sets the framerate per second to determine how often `loop()` is called per second. If the processor is not fast enough to maintain the specified rate, the frame rate will not be achieved. Setting the frame rate within `setup()` is recommended. The default rate is 25 frames per second. Calling `frameRate()` with no arguments returns the currently set framerate.",
        "returns": {
          "name": null,
          "description": "Currently set frame rate.",
          "type": [
            "Number"
          ]
        },
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "fps",
            "description": "Frames per second.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the framerate per second to determine how often `loop()` is called per second. If the processor is not fast enough to maintain the specified rate, the frame rate will not be achieved. Setting the frame rate within `setup()` is recommended. The default rate is 25 frames per second. Calling `frameRate()` with no arguments returns the currently set framerate."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "frameRate([fps])"
      },
      {
        "name": "height",
        "description": "System variable which stores the height of the current page.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "System variable which stores the height of the current page."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "height"
      },
      {
        "name": "width",
        "description": "System variable which stores the width of the current page.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "System variable which stores the width of the current page."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "width"
      },
      {
        "name": "VERSION",
        "description": "The basil version",
        "returns": null,
        "category": "Environment",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "The basil version"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "VERSION"
      },
      {
        "name": "inspect",
        "description": "Inspects a given object or any other data item and prints the result to the console. This is useful for inspecting or debugging any kind of variable or data item. The optional settings object allows to control the function's output. The following parameters can be set in the settings object:\n- `showProps`: Show or hide properties. Default: `true`\n- `showValues`: Show or hide values. Default: `true`\n- `showMethods`: Show or hide methods. Default: `false`\n- `maxLevel`: Chooses how many levels of properties should be inspected recursively. Default: `1`\n- `propList`: Allows to pass an array of property names to show. If `propList` is not set all properties will be shown. Default: `[]` (no propList)\nIf no settings object is set, the default values will be used.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "An object or any other data item to be inspected.",
            "optional": false,
            "type": [
              "Object"
            ]
          },
          {
            "name": "settings",
            "description": "A settings object to control the function's behavior.",
            "optional": true,
            "type": [
              "Object"
            ]
          },
          {
            "name": "settings.showProps",
            "description": "Show or hide properties. Default: `true`",
            "optional": true,
            "type": [
              "Boolean"
            ]
          },
          {
            "name": "settings.showValues",
            "description": "Show or hide values. Default: `true`",
            "optional": true,
            "type": [
              "Boolean"
            ]
          },
          {
            "name": "settings.showMethods",
            "description": "Show or hide methods. Default: `false`",
            "optional": true,
            "type": [
              "Boolean"
            ]
          },
          {
            "name": "settings.maxLevel",
            "description": "How many levels of properties should be inspected recursively. Default: `1`",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "settings.propList",
            "description": "Array of properties to show. Default: `[]` (no propList)",
            "optional": true,
            "type": [
              "Array"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Inspects a given object or any other data item and prints the result to the console. This is useful for inspecting or debugging any kind of variable or data item. The optional settings object allows to control the function's output. The following parameters can be set in the settings object:\n- `showProps`: Show or hide properties. Default: `true`\n- `showValues`: Show or hide values. Default: `true`\n- `showMethods`: Show or hide methods. Default: `false`\n- `maxLevel`: Chooses how many levels of properties should be inspected recursively. Default: `1`\n- `propList`: Allows to pass an array of property names to show. If `propList` is not set all properties will be shown. Default: `[]` (no propList)\nIf no settings object is set, the default values will be used."
          }
        ],
        "examples": [
          {
            "description": "Inspecting a string",
            "code": "inspect(\"foo\");"
          },
          {
            "description": "Inspecting the current page, its methods and an additional level of properties",
            "code": "inspect(page(), {showMethods: true, maxLevel: 2})"
          },
          {
            "description": "Inspecting an ellipse, listing only the properties \"geometricBounds\" and \"strokeWeight\"",
            "code": "var myEllipse = ellipse(0, 0, 10, 10);\ninspect(myEllipse, {maxLevel: 2, propList: [\"geometricBounds, strokeWeight\"]});"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "inspect(obj, [settings])"
      },
      {
        "name": "printInfo",
        "description": "Print numerous information about the current environment to the console.",
        "returns": null,
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Print numerous information about the current environment to the console."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "printInfo()"
      },
      {
        "name": "projectFolder",
        "description": "Get the folder of the active document as a Folder object. Use .absoluteURI to access a string representation of the folder path.",
        "returns": {
          "name": null,
          "description": "The folder of the the active document",
          "type": [
            "Folder"
          ]
        },
        "category": "Environment",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Get the folder of the active document as a Folder object. Use .absoluteURI to access a string representation of the folder path."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "projectFolder()"
      },
      {
        "name": "property",
        "description": "Sets a property of an object or of any other given data item to the specified value. Alternatively an object of key value pairs can be used as the second argument to set several properties to specified values at once. To retrieve a list of available properties for the different data types, the inspect() method can be used.",
        "returns": {
          "name": null,
          "description": "The object or other data item with the newly set property.",
          "type": [
            "Any"
          ]
        },
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "obj",
            "description": "An object or any other data item whose properties to change.",
            "optional": false,
            "type": [
              "Any"
            ]
          },
          {
            "name": "prop",
            "description": "A string describing an object's property or alternatively an object containing key value pairs.",
            "optional": false,
            "type": [
              "String",
              "Object"
            ]
          },
          {
            "name": "value",
            "description": "A value of the appropriate type to set the object's property to.",
            "optional": true,
            "type": [
              "Any"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets a property of an object or of any other given data item to the specified value. Alternatively an object of key value pairs can be used as the second argument to set several properties to specified values at once. To retrieve a list of available properties for the different data types, the inspect() method can be used."
          }
        ],
        "examples": [
          {
            "description": "Sets name and fill color of an ellipse",
            "code": "var ell = ellipse(100, 100, 50, 50);\nproperty(ell, \"name\", \"Red Circle\");\nproperty(ell, \"fillColor\", color(255, 0, 0));"
          },
          {
            "description": "Sets name and fill color of a rectangle and locks it, using an object with key value pairs",
            "code": "var blueSquare = rect(100, 100, 50, 50);\nvar squareProps = {\n  name: \"Blue Square\",\n  fillColor: color(0, 0, 255),\n  locked: true\n}\nproperty(blueSquare, squareProps);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "property(obj, prop, [value])"
      },
      {
        "name": "size",
        "description": "Sets the size of the current document, if arguments are given. If only one argument is given, both the width and the height are set to this value. Alternatively, a string can be given as the first argument to apply an existing page size preset (`\"A4\"`, `\"Letter\"` etc.). In this case, either `PORTRAIT` or `LANDSCAPE` can be used as a second argument to determine the orientation of the page. If no argument is given, an object containing the current document's width and height is returned.",
        "returns": {
          "name": null,
          "description": "Object containing the current `width` and `height` of the document.",
          "type": [
            "Object"
          ]
        },
        "category": "Environment",
        "subcategory": null,
        "parameters": [
          {
            "name": "widthOrPageSize",
            "description": "The desired width of the current document or the name of a page size preset.",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "heightOrOrientation",
            "description": "The desired height of the current document. If not provided the width will be used as the height. If the first argument is a page size preset, the second argument can be used to set the orientation.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the size of the current document, if arguments are given. If only one argument is given, both the width and the height are set to this value. Alternatively, a string can be given as the first argument to apply an existing page size preset (`\"A4\"`, `\"Letter\"` etc.). In this case, either `PORTRAIT` or `LANDSCAPE` can be used as a second argument to determine the orientation of the page. If no argument is given, an object containing the current document's width and height is returned."
          }
        ],
        "examples": [
          {
            "description": "Sets the document size to 70 x 100 units",
            "code": "size(70, 100);"
          },
          {
            "description": "Sets the document size to 70 x 70",
            "code": "size(70);"
          },
          {
            "description": "Sets the document size to A4, keeps the current orientation in place",
            "code": "size(\"A4\");"
          },
          {
            "description": "Sets the document size to A4, set the orientation to landscape",
            "code": "size(\"A4\", LANDSCAPE);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "size([widthOrPageSize], [heightOrOrientation])"
      },
      {
        "name": "stackArray",
        "description": "The name of the current script.",
        "returns": null,
        "category": "Environment",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "The name of the current script."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "stackArray"
      }
    ],
    "cat": "Environment"
  },
  {
    "entries": [
      {
        "name": "EPSILON",
        "description": "Epsilon",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Epsilon"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "EPSILON"
      },
      {
        "name": "HALF_PI",
        "description": "Half Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Half Pi"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "HALF_PI"
      },
      {
        "name": "KAPPA",
        "description": "Kappa",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Kappa"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "KAPPA"
      },
      {
        "name": "PI",
        "description": "Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Pi"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "PI"
      },
      {
        "name": "QUARTER_PI",
        "description": "Quarter Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Quarter Pi"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "QUARTER_PI"
      },
      {
        "name": "SINCOS_LENGTH",
        "description": "Sin Cos Length",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Sin Cos Length"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "SINCOS_LENGTH"
      },
      {
        "name": "TWO_PI",
        "description": "Two Pi",
        "returns": null,
        "category": "Math",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Two Pi"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "TWO_PI"
      },
      {
        "name": "abs",
        "description": "Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.",
        "returns": {
          "name": null,
          "description": "The absolute value of that number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "val",
            "description": "A number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "abs(val)"
      },
      {
        "name": "ceil",
        "description": "Calculates the closest integer value that is greater than or equal to the value of the parameter. For example, `ceil(9.03)` returns the value `10`.",
        "returns": {
          "name": null,
          "description": "The next highest integer value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "val",
            "description": "An arbitrary number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the closest integer value that is greater than or equal to the value of the parameter. For example, `ceil(9.03)` returns the value `10`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "ceil(val)"
      },
      {
        "name": "constrain",
        "description": "Constrains a value to not exceed a maximum and minimum value.",
        "returns": {
          "name": null,
          "description": "The constrained value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "aNumber",
            "description": "The value to constrain.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "aMin",
            "description": "Minimum limit.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "aMax",
            "description": "Maximum limit.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Constrains a value to not exceed a maximum and minimum value."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "constrain(aNumber, aMin, aMax)"
      },
      {
        "name": "dist",
        "description": "Calculates the distance between two points.",
        "returns": {
          "name": null,
          "description": "The distance.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x1",
            "description": "The x-coordinate of the first point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y1",
            "description": "The y-coordinate of the first point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x2",
            "description": "The x-coordinate of the second point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y2",
            "description": "The y-coordinate of the second point.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the distance between two points."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "dist(x1, y1, x2, y2)"
      },
      {
        "name": "exp",
        "description": "The `exp()` function returns `ex`, where `x` is the argument, and `e` is Euler's number (also known as Napier's constant), the base of the natural logarithms.",
        "returns": {
          "name": null,
          "description": "A number representing `ex`.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x",
            "description": "A number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `exp()` function returns `ex`, where `x` is the argument, and `e` is Euler's number (also known as Napier's constant), the base of the natural logarithms."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "exp(x)"
      },
      {
        "name": "floor",
        "description": "Calculates the closest integer value that is less than or equal to the value of the parameter.",
        "returns": {
          "name": null,
          "description": "Integer number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "a",
            "description": "A number.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the closest integer value that is less than or equal to the value of the parameter."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "floor(a)"
      },
      {
        "name": "lerp",
        "description": "Calculates a number between two numbers at a specific increment. The `amt` parameter is the amount to interpolate between the two values where `0.0` is equal to the first point, `0.1` is very near the first point, `0.5` is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.",
        "returns": {
          "name": null,
          "description": "The mapped value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "value1",
            "description": "First value.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "value2",
            "description": "Second value.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "amt",
            "description": "Amount between 0.0 and 1.0.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates a number between two numbers at a specific increment. The `amt` parameter is the amount to interpolate between the two values where `0.0` is equal to the first point, `0.1` is very near the first point, `0.5` is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "lerp(value1, value2, amt)"
      },
      {
        "name": "log",
        "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the values greater than `0`.",
        "returns": {
          "name": null,
          "description": "The natural logarithm.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x",
            "description": "A number, must be greater than `0`.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the values greater than `0`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "log(x)"
      },
      {
        "name": "mag",
        "description": "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from coordinate `(0,0)` to its `(x,y)` value. Therefore, `mag()` is a shortcut for writing `dist(0, 0, x, y)`.",
        "returns": {
          "name": null,
          "description": "The magnitude.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "x",
            "description": "Coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Coordinate, optional.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from coordinate `(0,0)` to its `(x,y)` value. Therefore, `mag()` is a shortcut for writing `dist(0, 0, x, y)`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "mag(x, y, [z])"
      },
      {
        "name": "map",
        "description": "Re-maps a number from one range to another.\nNumbers outside the range are not clamped to `0` and `1`, because out-of-range values are often intentional and useful.",
        "returns": {
          "name": null,
          "description": "The mapped value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "value",
            "description": "The value to be mapped.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "istart",
            "description": "The start of the input range.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "istop",
            "description": "The end of the input range.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ostart",
            "description": "The start of the output range.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ostop",
            "description": "The end of the output range.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Re-maps a number from one range to another.\nNumbers outside the range are not clamped to `0` and `1`, because out-of-range values are often intentional and useful."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "map(value, istart, istop, ostart, ostop)"
      },
      {
        "name": "max",
        "description": "Determines the largest value in a sequence of numbers.",
        "returns": {
          "name": null,
          "description": "The highest value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "a",
            "description": "A value or an array of Numbers.",
            "optional": false,
            "type": [
              "Number",
              "Array"
            ]
          },
          {
            "name": "b",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "c",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Determines the largest value in a sequence of numbers."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "max(a, [b], [c])"
      },
      {
        "name": "min",
        "description": "Determines the smallest value in a sequence of numbers.",
        "returns": {
          "name": null,
          "description": "The lowest value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "a",
            "description": "A value or an array of Numbers.",
            "optional": false,
            "type": [
              "Number",
              "Array"
            ]
          },
          {
            "name": "b",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "c",
            "description": "Another value to be compared.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Determines the smallest value in a sequence of numbers."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "min(a, [b], [c])"
      },
      {
        "name": "norm",
        "description": "Normalizes a number from another range into a value between `0` and `1`.\nIdentical to `map(value, low, high, 0, 1);`\nNumbers outside the range are not clamped to `0` and `1`, because out-of-range values are often intentional and useful.",
        "returns": {
          "name": null,
          "description": "The normalized value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "aNumber",
            "description": "The value to be normed.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "low",
            "description": "The lowest value to be expected.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "high",
            "description": "The highest value to be expected.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Normalizes a number from another range into a value between `0` and `1`.\nIdentical to `map(value, low, high, 0, 1);`\nNumbers outside the range are not clamped to `0` and `1`, because out-of-range values are often intentional and useful."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "norm(aNumber, low, high)"
      },
      {
        "name": "pow",
        "description": "Facilitates exponential expressions. The `pow()` function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, `pow(3, 5)` is equivalent to the expression `3 * 3 * 3 * 3 * 3` and `pow(3, -5)` is equivalent to `1 / 3 * 3 * 3 * 3 * 3`.",
        "returns": {
          "name": null,
          "description": "the result",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "num",
            "description": "Base of the exponential expression.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "exponent",
            "description": "Power of which to raise the base.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Facilitates exponential expressions. The `pow()` function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, `pow(3, 5)` is equivalent to the expression `3 * 3 * 3 * 3 * 3` and `pow(3, -5)` is equivalent to `1 / 3 * 3 * 3 * 3 * 3`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "pow(num, exponent)"
      },
      {
        "name": "round",
        "description": "Calculates the integer closest to the value parameter. For example, `round(9.2)` returns the value `9`.",
        "returns": {
          "name": null,
          "description": "The rounded value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "value",
            "description": "The value to be rounded.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the integer closest to the value parameter. For example, `round(9.2)` returns the value `9`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "round(value)"
      },
      {
        "name": "sq",
        "description": "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, `-1 * -1 = 1`.",
        "returns": {
          "name": null,
          "description": "Squared number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "aNumber",
            "description": "The value to be squared.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, `-1 * -1 = 1`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "sq(aNumber)"
      },
      {
        "name": "sqrt",
        "description": "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that `s * s = a`. It is the opposite of squaring.",
        "returns": {
          "name": null,
          "description": "Square root.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Calculation",
        "parameters": [
          {
            "name": "val",
            "description": "A value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that `s * s = a`. It is the opposite of squaring."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "sqrt(val)"
      },
      {
        "name": "noise",
        "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural ordered, harmonic succession of numbers compared to the standard `random()` function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.\n\nThe main difference to the `random()` function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program). The resulting value will always be between `0` and `1`. basil.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The noise value can be animated by moving through the noise space. The 2nd and 3rd dimension can also be interpreted as time.\n\nThe actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result.\n\nAnother way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using `noise()` within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of `0.005`- `0.03` work best for most applications, but this will differ depending on use.",
        "returns": {
          "name": null,
          "description": "The noise value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "x",
            "description": "Coordinate in x space.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Coordinate in y space.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "Coordinate in z space.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more natural ordered, harmonic succession of numbers compared to the standard `random()` function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.\n\nThe main difference to the `random()` function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program). The resulting value will always be between `0` and `1`. basil.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The noise value can be animated by moving through the noise space. The 2nd and 3rd dimension can also be interpreted as time.\n\nThe actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result.\n\nAnother way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using `noise()` within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of `0.005`- `0.03` work best for most applications, but this will differ depending on use."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "noise(x, [y], [z])"
      },
      {
        "name": "noiseDetail",
        "description": "Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overal intensity of the noise, whereas higher octaves create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the 1st octave. This falloff amount can be changed by adding an additional function parameter. Eg. a falloff factor of `0.75` means each octave will now have 75% impact (25% less) of the previous lower octave. Any value between `0` and `1` is valid, however note that values greater than `0.5` might result in greater than `1` values returned by `noise()`.\n\nBy changing these parameters, the signal created by the `noise()` function can be adapted to fit very specific needs and characteristics.",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "octaves",
            "description": "Number of octaves to be used by the noise() function.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "fallout",
            "description": "Falloff factor for each octave.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Adjusts the character and level of detail produced by the Perlin noise function. Similar to harmonics in physics, noise is computed over several octaves. Lower octaves contribute more to the output signal and as such define the overal intensity of the noise, whereas higher octaves create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing exactly half than its predecessor, starting at 50% strength for the 1st octave. This falloff amount can be changed by adding an additional function parameter. Eg. a falloff factor of `0.75` means each octave will now have 75% impact (25% less) of the previous lower octave. Any value between `0` and `1` is valid, however note that values greater than `0.5` might result in greater than `1` values returned by `noise()`.\n\nBy changing these parameters, the signal created by the `noise()` function can be adapted to fit very specific needs and characteristics."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "noiseDetail(octaves, fallout)"
      },
      {
        "name": "noiseSeed",
        "description": "Sets the seed value for `noise()`. By default, `noise()` produces different results each time the program is run. Set the value parameter to a constant to return the same pseudo-random numbers each time the software is run.",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "seed",
            "description": "Noise seed value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the seed value for `noise()`. By default, `noise()` produces different results each time the program is run. Set the value parameter to a constant to return the same pseudo-random numbers each time the software is run."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "noiseSeed(seed)"
      },
      {
        "name": "random",
        "description": "Generates random numbers. Each time the `random()` function is called, it returns an unexpected value within the specified range. If one parameter is passed to the function it will return a float between zero and the value of the high parameter. The function call `random(5)` returns values between `0` and `5`. If two parameters are passed, it will return a float with a value between the the parameters. The function call `random(-5, 10.2)` returns values between `-5` and `10.2`.\nOne parameter sets the range from `0` to the given parameter, while with two parameters present you set the range from `val1` to `val2`.",
        "returns": {
          "name": null,
          "description": "A random number.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "low",
            "description": "The low border of the range.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "high",
            "description": "The high border of the range.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Generates random numbers. Each time the `random()` function is called, it returns an unexpected value within the specified range. If one parameter is passed to the function it will return a float between zero and the value of the high parameter. The function call `random(5)` returns values between `0` and `5`. If two parameters are passed, it will return a float with a value between the the parameters. The function call `random(-5, 10.2)` returns values between `-5` and `10.2`.\nOne parameter sets the range from `0` to the given parameter, while with two parameters present you set the range from `val1` to `val2`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "random([low], [high])"
      },
      {
        "name": "randomSeed",
        "description": "Sets the seed value for `random()`.\nBy default, `random()` produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run.",
        "returns": null,
        "category": "Math",
        "subcategory": "Random",
        "parameters": [
          {
            "name": "seed",
            "description": "The seed value.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the seed value for `random()`.\nBy default, `random()` produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "randomSeed(seed)"
      },
      {
        "name": "acos",
        "description": "The inverse of `cos()`, returns the arc cosine of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`).",
        "returns": {
          "name": null,
          "description": "The arc cosine.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "value",
            "description": "The value whose arc cosine is to be returned.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The inverse of `cos()`, returns the arc cosine of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "acos(value)"
      },
      {
        "name": "asin",
        "description": "The inverse of `sin()`, returns the arc sine of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`).",
        "returns": {
          "name": null,
          "description": "The arc sine.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "value",
            "description": "The value whose arc sine is to be returned.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The inverse of `sin()`, returns the arc sine of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "asin(value)"
      },
      {
        "name": "atan",
        "description": "The inverse of `tan()`, returns the arc tangent of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`).",
        "returns": {
          "name": null,
          "description": "The arc tangent.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "value",
            "description": "The value whose arc tangent is to be returned.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The inverse of `tan()`, returns the arc tangent of a value. This function expects the values in the range of `-1` to `1` and values are returned in the range `0` to `PI` (`3.1415927`)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "atan(value)"
      },
      {
        "name": "atan2",
        "description": "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from `PI` to `-PI`. The `atan2()` function is most often used for orienting geometry to the position of the cursor. Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent.",
        "returns": {
          "name": null,
          "description": "The atan2 value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "y",
            "description": "The y coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x",
            "description": "The x coordinate.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from `PI` to `-PI`. The `atan2()` function is most often used for orienting geometry to the position of the cursor. Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "atan2(y, x)"
      },
      {
        "name": "cos",
        "description": "Calculates the cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `PI * 2`). Values are returned in the range `-1` to `1`.",
        "returns": {
          "name": null,
          "description": "The cosine.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "rad",
            "description": "A value in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `PI * 2`). Values are returned in the range `-1` to `1`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "cos(rad)"
      },
      {
        "name": "degrees",
        "description": "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and `2 * PI` radians in a circle. For example, `90° = PI / 2 = 1.5707964`. All trigonometric methods in basil require their parameters to be specified in radians.",
        "returns": {
          "name": null,
          "description": "The given angle in degree.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "aAngle",
            "description": "An angle in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and `2 * PI` radians in a circle. For example, `90° = PI / 2 = 1.5707964`. All trigonometric methods in basil require their parameters to be specified in radians."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "degrees(aAngle)"
      },
      {
        "name": "radians",
        "description": "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and `2 * PI` radians in a circle. For example, `90° = PI / 2 = 1.5707964`. All trigonometric methods in basil require their parameters to be specified in radians.",
        "returns": {
          "name": null,
          "description": "The given angle in radians.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "aAngle",
            "description": "An angle in degree.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and `2 * PI` radians in a circle. For example, `90° = PI / 2 = 1.5707964`. All trigonometric methods in basil require their parameters to be specified in radians."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "radians(aAngle)"
      },
      {
        "name": "sin",
        "description": "Calculates the sine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `6.28`). Values are returned in the range `-1` to `1`.",
        "returns": {
          "name": null,
          "description": "The sine value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "rad",
            "description": "A value in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the sine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `6.28`). Values are returned in the range `-1` to `1`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "sin(rad)"
      },
      {
        "name": "tan",
        "description": "Calculates the ratio of the sine and cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `PI * 2`). Values are returned in the range `infinity` to `-infinity`.",
        "returns": {
          "name": null,
          "description": "The tangent value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Trigonometry",
        "parameters": [
          {
            "name": "rad",
            "description": "A value in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the ratio of the sine and cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from `0` to `PI * 2`). Values are returned in the range `infinity` to `-infinity`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "tan(rad)"
      },
      {
        "name": "Vector",
        "description": "A class to describe a two or three dimensional vector. This data type stores two or three variables that are commonly used as a position, velocity, and/or acceleration. Technically, position is a point and velocity and acceleration are vectors, but this is often simplified to consider all three as vectors. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (the object's location, expressed as a point.), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the Vector class.\n\nConstructor of Vector, can be two- or three-dimensional.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "x",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The third vector.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "A class to describe a two or three dimensional vector. This data type stores two or three variables that are commonly used as a position, velocity, and/or acceleration. Technically, position is a point and velocity and acceleration are vectors, but this is often simplified to consider all three as vectors. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (the object's location, expressed as a point.), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the Vector class.\n\nConstructor of Vector, can be two- or three-dimensional."
          },
          {
            "name": null,
            "title": "class",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector(x, y, [z])"
      },
      {
        "name": "Vector.angleBetween",
        "description": "Static function. Calculates the angle between two vectors. Is meant to be called \"static\" i.e. `Vector.angleBetween(v1, v2);`",
        "returns": {
          "name": null,
          "description": "The angle.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Static function. Calculates the angle between two vectors. Is meant to be called \"static\" i.e. `Vector.angleBetween(v1, v2);`"
          },
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.angleBetween(v1, v2)"
      },
      {
        "name": "Vector.cross",
        "description": "Static function. Calculates the cross product of two vectors. Is meant to be called \"static\" i.e. `Vector.cross(v1, v2);`",
        "returns": {
          "name": null,
          "description": "The cross product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Static function. Calculates the cross product of two vectors. Is meant to be called \"static\" i.e. `Vector.cross(v1, v2);`"
          },
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.cross(v1, v2)"
      },
      {
        "name": "Vector.cross",
        "description": "Calculates the cross product from this vector to another as `x`, `y`, and `z` components or full vector.",
        "returns": {
          "name": null,
          "description": "The cross product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the cross product from this vector to another as `x`, `y`, and `z` components or full vector."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.cross(v, [y], [z])"
      },
      {
        "name": "Vector.dist",
        "description": "Static function. Calculates the Euclidean distance between two points (considering a point as a vector object). Is meant to be called \"static\" i.e. `Vector.dist(v1, v2);`",
        "returns": {
          "name": null,
          "description": "The distance.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Static function. Calculates the Euclidean distance between two points (considering a point as a vector object). Is meant to be called \"static\" i.e. `Vector.dist(v1, v2);`"
          },
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.dist(v1, v2)"
      },
      {
        "name": "Vector.dist",
        "description": "Calculates the distance from this vector to another as `x`, `y`, and `z` components or full vector.",
        "returns": {
          "name": null,
          "description": "The distance.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the distance from this vector to another as `x`, `y`, and `z` components or full vector."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.dist(v, [y], [z])"
      },
      {
        "name": "Vector.dot",
        "description": "Static function. Calculates the dot product of two vectors. Is meant to be called \"static\" i.e. `Vector.dot(v1, v2);`",
        "returns": {
          "name": null,
          "description": "The dot product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v1",
            "description": "The first vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          },
          {
            "name": "v2",
            "description": "The second vector.",
            "optional": false,
            "type": [
              "Vector"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Static function. Calculates the dot product of two vectors. Is meant to be called \"static\" i.e. `Vector.dot(v1, v2);`"
          },
          {
            "title": "static",
            "description": null
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.dot(v1, v2)"
      },
      {
        "name": "Vector.dot",
        "description": "Calculates the dot product from this vector to another as `x`, `y`, and `z` components or full vector.",
        "returns": {
          "name": null,
          "description": "The dot product.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the dot product from this vector to another as `x`, `y`, and `z` components or full vector."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.dot(v, [y], [z])"
      },
      {
        "name": "Vector.add",
        "description": "Adds `x`, `y`, and `z` components to a vector, adds one vector to another.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Adds `x`, `y`, and `z` components to a vector, adds one vector to another."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.add(v, [y], [z])"
      },
      {
        "name": "Vector.array",
        "description": "Returns this vector as an array `[x,y,z]`.",
        "returns": {
          "name": null,
          "description": "The `x`, `y` and `z` components as an array of `[x,y,z]`.",
          "type": [
            "Array"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns this vector as an array `[x,y,z]`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.array()"
      },
      {
        "name": "Vector.div",
        "description": "Divides this vector through `x`, `y`, and `z` components or another vector.`",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Divides this vector through `x`, `y`, and `z` components or another vector.`"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.div(v, [y], [z])"
      },
      {
        "name": "Vector.get",
        "description": "Gets a copy of the vector, returns a Vector object.",
        "returns": {
          "name": null,
          "description": "A copy of the vector.",
          "type": [
            "Vector"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Gets a copy of the vector, returns a Vector object."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.get()"
      },
      {
        "name": "Vector.heading",
        "description": "The 2D orientation (heading) of this vector in radian.",
        "returns": {
          "name": null,
          "description": "A radian angle value.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The 2D orientation (heading) of this vector in radian."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.heading()"
      },
      {
        "name": "Vector.limit",
        "description": "Normalizes the length of this vector to the given parameter.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "high",
            "description": "The value to scale to.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Normalizes the length of this vector to the given parameter."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.limit(high)"
      },
      {
        "name": "Vector.mag",
        "description": "Calculates the magnitude (length) of the vector and returns the result as a float",
        "returns": {
          "name": null,
          "description": "The length.",
          "type": [
            "Number"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Calculates the magnitude (length) of the vector and returns the result as a float"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.mag()"
      },
      {
        "name": "Vector.mult",
        "description": "Multiplies this vector with `x`, `y`, and `z` components or another vector.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Multiplies this vector with `x`, `y`, and `z` components or another vector."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.mult(v, [y], [z])"
      },
      {
        "name": "Vector.normalize",
        "description": "Normalizes the length of this vector to 1.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Normalizes the length of this vector to 1."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.normalize()"
      },
      {
        "name": "Vector.set",
        "description": "Sets the `x`, `y`, and `z` component of the vector using three separate variables, the data from a Vector, or the values from a float array.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a vector, array or `x` component.",
            "optional": false,
            "type": [
              "Number",
              "Array",
              "Vector"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the `x`, `y`, and `z` component of the vector using three separate variables, the data from a Vector, or the values from a float array."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.set(v, [y], [z])"
      },
      {
        "name": "Vector.sub",
        "description": "Substract `x`, `y`, and `z` components or a full vector from this vector.",
        "returns": null,
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [
          {
            "name": "v",
            "description": "Either a full vector or an `x` component.",
            "optional": false,
            "type": [
              "Vector",
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "The `y` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "z",
            "description": "The `z` component.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Substract `x`, `y`, and `z` components or a full vector from this vector."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.sub(v, [y], [z])"
      },
      {
        "name": "Vector.toString",
        "description": "Returns data about this vector as a string.",
        "returns": {
          "name": null,
          "description": "The `x`, `y` and `z` components as a string.",
          "type": [
            "String"
          ]
        },
        "category": "Math",
        "subcategory": "Vector",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns data about this vector as a string."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "Vector.toString()"
      }
    ],
    "cat": "Math"
  },
  {
    "entries": [
      {
        "name": "LOREM",
        "description": "Returns a Lorem ipsum string that can be used for testing.",
        "returns": null,
        "category": "Typography",
        "subcategory": "Constants",
        "parameters": [],
        "kind": "property",
        "tags": [
          {
            "title": "description",
            "description": "Returns a Lorem ipsum string that can be used for testing."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "LOREM"
      },
      {
        "name": "text",
        "description": "Creates a text frame on the current layer on the current page in the current document. The text frame gets created in the position specified by the `x` and `y` parameters. The default document font will be used unless a font is set with the `textFont()` function. The default document font size will be used unless a font size is set with the `textSize()` function. Change the color of the text with the `fill()` function. The text displays in relation to the `textAlign()` and `textYAlign()` functions. The `w` and `h` parameters define a rectangular area. If a rectangle, an oval, a polygon or a graphic line are used instead of an x position, the given text will be placed in/on this shape.",
        "returns": {
          "name": null,
          "description": "The created text frame instance or the text path",
          "type": [
            "TextFrame",
            "TextPath"
          ]
        },
        "category": "Typography",
        "subcategory": null,
        "parameters": [
          {
            "name": "txt",
            "description": "The text content to set in the text frame.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "x",
            "description": "x-coordinate of text frame or item to place the text in or graphic line to place the text onto as a text path.",
            "optional": false,
            "type": [
              "Number",
              "Rectangle",
              "Oval",
              "Polygon",
              "GraphicLine",
              "TextFrame"
            ]
          },
          {
            "name": "y",
            "description": "y-coordinate of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "width of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "height of text frame",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Creates a text frame on the current layer on the current page in the current document. The text frame gets created in the position specified by the `x` and `y` parameters. The default document font will be used unless a font is set with the `textFont()` function. The default document font size will be used unless a font size is set with the `textSize()` function. Change the color of the text with the `fill()` function. The text displays in relation to the `textAlign()` and `textYAlign()` functions. The `w` and `h` parameters define a rectangular area. If a rectangle, an oval, a polygon or a graphic line are used instead of an x position, the given text will be placed in/on this shape."
          }
        ],
        "examples": [
          {
            "description": "Create a text frame with a Lorem ipsum text.",
            "code": "text(LOREM, 50, 50, 100, 200);"
          },
          {
            "description": "Place a Lorem ipsum text inside an oval shape.",
            "code": "var ell = ellipse(50, 50, 100, 100);\ntext(LOREM, ell);"
          },
          {
            "description": "Place a Lorem ipsum text as a text path onto a line.",
            "code": "var l = line(50, 50, 200, 80);\ntext(LOREM, l);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "text(txt, x, y, w, h)"
      },
      {
        "name": "textAlign",
        "description": "Sets the current horizontal and vertical text alignment.",
        "returns": null,
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "align",
            "description": "The horizontal text alignment to set. Must be one of the InDesign `Justification` enum values:\n- `Justification.AWAY_FROM_BINDING_SIDE`\n- `Justification.CENTER_ALIGN`\n- `Justification.CENTER_JUSTIFIED`\n- `Justification.FULLY_JUSTIFIED`\n- `Justification.LEFT_ALIGN`\n- `Justification.RIGHT_ALIGN`\n- `Justification.RIGHT_JUSTIFIED`\n- `Justification.TO_BINDING_SIDE`",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "yAlign",
            "description": "The vertical text alignment to set. Must be one of the InDesign `VerticalJustification` enum values:\n- `VerticalJustification.BOTTOM_ALIGN`\n- `VerticalJustification.CENTER_ALIGN`\n- `VerticalJustification.JUSTIFY_ALIGN`\n- `VerticalJustification.TOP_ALIGN`",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the current horizontal and vertical text alignment."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textAlign(align, [yAlign])"
      },
      {
        "name": "textFont",
        "description": "Returns the current font and sets it if argument `fontName` is given.",
        "returns": {
          "name": null,
          "description": "The current font object",
          "type": [
            "Font"
          ]
        },
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "fontName",
            "description": "The name of the font to set e.g. Helvetica",
            "optional": true,
            "type": [
              "String"
            ]
          },
          {
            "name": "fontStyle",
            "description": "The font style e.g. Bold",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current font and sets it if argument `fontName` is given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textFont([fontName], [fontStyle])"
      },
      {
        "name": "textKerning",
        "description": "Returns the current kerning and sets it if argument `kerning` is given.",
        "returns": {
          "name": null,
          "description": "The current kerning.",
          "type": [
            "Number"
          ]
        },
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "kerning",
            "description": "The value to set.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current kerning and sets it if argument `kerning` is given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textKerning([kerning])"
      },
      {
        "name": "textLeading",
        "description": "Returns the spacing between lines of text in units of points and sets it if argument `leading` is given.",
        "returns": {
          "name": null,
          "description": "The current leading.",
          "type": [
            "Number",
            "String"
          ]
        },
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "leading",
            "description": "The spacing between lines of text in units of points or the default InDesign enum value `Leading.AUTO`.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the spacing between lines of text in units of points and sets it if argument `leading` is given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textLeading([leading])"
      },
      {
        "name": "textSize",
        "description": "Returns the current font size in points and sets it if argument `pointSize` is given.",
        "returns": {
          "name": null,
          "description": "The current point size.",
          "type": [
            "Number"
          ]
        },
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "pointSize",
            "description": "The size in points to set.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current font size in points and sets it if argument `pointSize` is given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textSize([pointSize])"
      },
      {
        "name": "textTracking",
        "description": "Returns the current tracking and sets it if argument `tracking` is given.",
        "returns": {
          "name": null,
          "description": "The current tracking.",
          "type": [
            "Number"
          ]
        },
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "tracking",
            "description": "The value to set.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the current tracking and sets it if argument `tracking` is given."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "textTracking([tracking])"
      },
      {
        "name": "typo",
        "description": "Sets text properties to the given item. If the item is not an instance the text property can be set to, the property gets set to the direct descendants of the given item, e.g. all stories of a given document.\n\nIf no value is given and the given property is a string, the function acts as a getter and returns the corresponding value(s) in an array. This can either be an array containing the value of the concrete item (e.g. character) the values of the item's descendants (e.g. paragraphs of given text frame).",
        "returns": {
          "name": null,
          "description": "The property value(s) if the function acts as getter or the items the property was assigned to.",
          "type": [
            null,
            null,
            null
          ]
        },
        "category": "Typography",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "item",
            "description": "The object to apply the property to.",
            "optional": false,
            "type": [
              "Document",
              "Spread",
              "Page",
              "Layer",
              "Story",
              "TextFrame",
              "TextPath",
              "Text"
            ]
          },
          {
            "name": "property",
            "description": "The text property name or an object of key/value property/value pairs. If property is a string and no value is given, the function acts as getter.",
            "optional": false,
            "type": [
              "String",
              "Object"
            ]
          },
          {
            "name": "value",
            "description": "The value to apply to the property.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets text properties to the given item. If the item is not an instance the text property can be set to, the property gets set to the direct descendants of the given item, e.g. all stories of a given document.\n\nIf no value is given and the given property is a string, the function acts as a getter and returns the corresponding value(s) in an array. This can either be an array containing the value of the concrete item (e.g. character) the values of the item's descendants (e.g. paragraphs of given text frame)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "typo(item, property, [value])"
      },
      {
        "name": "applyCharacterStyle",
        "description": "Applies a character style to the given text object, text frame or story. The character style can be given as name or as character style instance.",
        "returns": {
          "name": null,
          "description": "The text that the style was applied to.",
          "type": [
            "Text"
          ]
        },
        "category": "Typography",
        "subcategory": "Styles",
        "parameters": [
          {
            "name": "text",
            "description": "The text frame, text object or story to apply the style to.",
            "optional": false,
            "type": [
              "TextFrame",
              "TextObject",
              "Story"
            ]
          },
          {
            "name": "style",
            "description": "A character style instance or the name of the character style to apply.",
            "optional": false,
            "type": [
              "CharacterStyle",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Applies a character style to the given text object, text frame or story. The character style can be given as name or as character style instance."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "applyCharacterStyle(text, style)"
      },
      {
        "name": "applyParagraphStyle",
        "description": "Applies a paragraph style to the given text object, text frame or story. The paragraph style can be given as name or as paragraph style instance.",
        "returns": {
          "name": null,
          "description": "The text that the style was applied to.",
          "type": [
            "Text"
          ]
        },
        "category": "Typography",
        "subcategory": "Styles",
        "parameters": [
          {
            "name": "text",
            "description": "The text frame, text object or story to apply the style to.",
            "optional": false,
            "type": [
              "TextFrame",
              "TextObject",
              "Story"
            ]
          },
          {
            "name": "style",
            "description": "A paragraph style instance or the name of the paragraph style to apply.",
            "optional": false,
            "type": [
              "ParagraphStyle",
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Applies a paragraph style to the given text object, text frame or story. The paragraph style can be given as name or as paragraph style instance."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "applyParagraphStyle(text, style)"
      },
      {
        "name": "characterStyle",
        "description": "Returns the character style of a given text object or the character style with the given name. If a character style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the character style's properties.",
        "returns": {
          "name": null,
          "description": "The character style instance.",
          "type": [
            "CharacterStyle"
          ]
        },
        "category": "Typography",
        "subcategory": "Styles",
        "parameters": [
          {
            "name": "textOrName",
            "description": "A text object whose style to return or the name of the character style to return.",
            "optional": false,
            "type": [
              "Text",
              "String"
            ]
          },
          {
            "name": "props",
            "description": "Optional: An object of property name/value pairs to set the style's properties.",
            "optional": true,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the character style of a given text object or the character style with the given name. If a character style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the character style's properties."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "characterStyle(textOrName, [props])"
      },
      {
        "name": "paragraphStyle",
        "description": "Returns the paragraph style of a given text object or the paragraph style with the given name. If a paragraph style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the paragraph style's properties.",
        "returns": {
          "name": null,
          "description": "The paragraph style instance.",
          "type": [
            "ParagraphStyle"
          ]
        },
        "category": "Typography",
        "subcategory": "Styles",
        "parameters": [
          {
            "name": "textOrName",
            "description": "A text object whose style to return or the name of the paragraph style to return.",
            "optional": false,
            "type": [
              "Text",
              "String"
            ]
          },
          {
            "name": "props",
            "description": "Optional: An object of property name/value pairs to set the style's properties.",
            "optional": true,
            "type": [
              "Object"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the paragraph style of a given text object or the paragraph style with the given name. If a paragraph style of the given name does not exist, it gets created. Optionally a props object of property name/value pairs can be used to set the paragraph style's properties."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "paragraphStyle(textOrName, [props])"
      }
    ],
    "cat": "Typography"
  },
  {
    "entries": [
      {
        "name": "image",
        "description": "Adds an image to the document. If the image argument is given as a string the image file must be in the document's data directory which is in the same directory where the document is saved in. The image argument can also be a File instance which can be placed even before the document was saved. The second argument can either be the `x` position of the frame to create or an instance of a rectangle, oval or polygon to place the image in. If an `x` position is given, a `y` position must be given, too. If `x` and `y` positions are given and width and height are not given, the frame's size gets set to the original image size.",
        "returns": {
          "name": null,
          "description": "The item instance the image was placed in.",
          "type": [
            "Rectangle",
            "Oval",
            "Polygon"
          ]
        },
        "category": "Image",
        "subcategory": null,
        "parameters": [
          {
            "name": "img",
            "description": "The image file name in the document's data directory or a File instance.",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "x",
            "description": "The `x` position on the current page or the item instance to place the image in.",
            "optional": false,
            "type": [
              "Number",
              "Rectangle",
              "Oval",
              "Polygon",
              "TextFrame"
            ]
          },
          {
            "name": "y",
            "description": "The `y` position on the current page. Ignored if `x` is not a number.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "The width of the rectangle to add the image to. Ignored if `x` is not a number.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "The height of the rectangle to add the image to. Ignored if `x` is not a number.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Adds an image to the document. If the image argument is given as a string the image file must be in the document's data directory which is in the same directory where the document is saved in. The image argument can also be a File instance which can be placed even before the document was saved. The second argument can either be the `x` position of the frame to create or an instance of a rectangle, oval or polygon to place the image in. If an `x` position is given, a `y` position must be given, too. If `x` and `y` positions are given and width and height are not given, the frame's size gets set to the original image size."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "image(img, x, [y], [w], [h])"
      },
      {
        "name": "imageMode",
        "description": "Modifies the location from which images draw. The default mode is `CORNER`, which specifies the location to be the upper left corner and uses the fourth and fifth parameters of `image()` to set the image's width and height. The syntax `imageMode(CORNERS)` uses the second and third parameters of `image()` to set the location of one corner of the image and uses the fourth and fifth parameters to set the opposite corner. Use `imageMode(CENTER)` to draw images centered at the given `x` and `y` position. If no parameter is passed the currently set mode is returned as String.",
        "returns": {
          "name": null,
          "description": "The current mode.",
          "type": [
            "String"
          ]
        },
        "category": "Image",
        "subcategory": null,
        "parameters": [
          {
            "name": "mode",
            "description": "Either `CORNER`, `CORNERS`, or `CENTER`.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Modifies the location from which images draw. The default mode is `CORNER`, which specifies the location to be the upper left corner and uses the fourth and fifth parameters of `image()` to set the image's width and height. The syntax `imageMode(CORNERS)` uses the second and third parameters of `image()` to set the location of one corner of the image and uses the fourth and fifth parameters to set the opposite corner. Use `imageMode(CENTER)` to draw images centered at the given `x` and `y` position. If no parameter is passed the currently set mode is returned as String."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "imageMode([mode])"
      }
    ],
    "cat": "Image"
  },
  {
    "entries": [
      {
        "name": "shellExecute",
        "description": "Executes a shell command and returns the result, currently Mac only.\n\nBE CAREFUL!",
        "returns": {
          "name": null,
          "description": "{ description_of_the_return_value }",
          "type": [
            "String"
          ]
        },
        "category": "Input",
        "subcategory": null,
        "parameters": [
          {
            "name": "cmd",
            "description": "The shell command to execute",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Executes a shell command and returns the result, currently Mac only.\n\nBE CAREFUL!"
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "shellExecute(cmd)"
      },
      {
        "name": "download",
        "description": "Downloads an URL to a file, currently Mac only.",
        "returns": null,
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "url",
            "description": "The download url",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "file",
            "description": "A relative file path in the project folder or a File instance",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Downloads an URL to a file, currently Mac only."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "download(url, [file])"
      },
      {
        "name": "file",
        "description": "Returns a file object.\nNote that the resulting file object can either refer to an already existing file or if the file does not exist, it can create a preliminary \"virtual\" file that refers to a file that could be created later (i.e. by an export command).",
        "returns": {
          "name": null,
          "description": "File at the given path.",
          "type": [
            "File"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "filePath",
            "description": "The file path.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a file object.\nNote that the resulting file object can either refer to an already existing file or if the file does not exist, it can create a preliminary \"virtual\" file that refers to a file that could be created later (i.e. by an export command)."
          }
        ],
        "examples": [
          {
            "description": "Get an image file from the desktop and place it in the document",
            "code": "var myImage = file(\"~/Desktop/myImage.jpg\");\nimage(myImage, 0, 0);"
          },
          {
            "description": "Create a file and export it to the desktop",
            "code": "var myExportFile = file(\"~/Desktop/myNewExportFile.pdf\");\nsavePDF(myExportFile);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "file(filePath)"
      },
      {
        "name": "files",
        "description": "Gets all files of a folder and returns them in an array of file objects. The settings object can be used to restrict the search to certain file types only, to include hidden files and to include files in subfolders.",
        "returns": {
          "name": null,
          "description": "Array of the resulting file(s). If no files are found, an empty array will be returned.",
          "type": [
            "Array"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "folder",
            "description": "The folder that holds the files or a string describing the path to that folder.",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "settings",
            "description": "A settings object to control the function's behavior.",
            "optional": true,
            "type": [
              "Object"
            ]
          },
          {
            "name": "settings.filter",
            "description": "Suffix(es) of file types to include. Default: `\"*\"` (include all file types)",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "settings.hidden",
            "description": "Hidden files will be included. Default: `false`",
            "optional": true,
            "type": [
              "Boolean"
            ]
          },
          {
            "name": "settings.recursive",
            "description": "Searches subfolders recursively for matching files. Default: `false`",
            "optional": true,
            "type": [
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Gets all files of a folder and returns them in an array of file objects. The settings object can be used to restrict the search to certain file types only, to include hidden files and to include files in subfolders."
          }
        ],
        "examples": [
          {
            "description": "Get a folder from the desktop and load all its JPEG files",
            "code": "var myImageFolder = folder(\"~/Desktop/myImages/\");\nvar myImageFiles = files(myImageFolder, {filter: [\"jpeg\", \"jpg\"]});"
          },
          {
            "description": "If the document is saved, load all files from its data folder, including from its subfolders",
            "code": "var myDataFolder = folder();\nvar allMyDataFiles = files(myDataFolder, {recursive: true});"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "files([folder], [settings])"
      },
      {
        "name": "folder",
        "description": "Returns a folder object.\nNote that the resulting folder object can either refer to an already existing folder or if the folder does not exist, it can create a preliminary \"virtual\" folder that refers to a folder that could be created later.",
        "returns": {
          "name": null,
          "description": "Folder at the given path. If no path is given, but the document is already saved, the document's data folder will be returned.",
          "type": [
            "Folder"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "folderPath",
            "description": "The path of the folder.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns a folder object.\nNote that the resulting folder object can either refer to an already existing folder or if the folder does not exist, it can create a preliminary \"virtual\" folder that refers to a folder that could be created later."
          }
        ],
        "examples": [
          {
            "description": "Get a folder from the desktop and load its files",
            "code": "var myImageFolder = folder(\"~/Desktop/myImages/\");\nvar myImageFiles = files(myImageFolder);"
          },
          {
            "description": "Get the data folder, if the document is already saved",
            "code": "var myDataFolder = folder();"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "folder([folderPath])"
      },
      {
        "name": "loadString",
        "description": "Reads the contents of a file or loads an URL into a String. If the file is specified by name as String, it must be located in the document's data directory.",
        "returns": {
          "name": null,
          "description": "String file or URL content.",
          "type": [
            "String"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "file",
            "description": "The text file name in the document's data directory or a File instance or an URL",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Reads the contents of a file or loads an URL into a String. If the file is specified by name as String, it must be located in the document's data directory."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "loadString(file)"
      },
      {
        "name": "loadStrings",
        "description": "Reads the contents of a file or loads an URL and creates a string array of its individual lines. If the file is specified by name as string, it must be located in the document's data directory.",
        "returns": {
          "name": null,
          "description": "Array of the individual lines in the given file or URL",
          "type": [
            "Array"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "file",
            "description": "The text file name in the document's data directory or a file instance or an URL",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Reads the contents of a file or loads an URL and creates a string array of its individual lines. If the file is specified by name as string, it must be located in the document's data directory."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "loadStrings(file)"
      },
      {
        "name": "selectFile",
        "description": "Opens a selection dialog that allows to select one file. The settings object can be used to add a prompt text at the top of the dialog, to restrict the selection to certain file types and to set the dialog's starting folder.",
        "returns": {
          "name": null,
          "description": "The selected file. If the user cancels, `null` will be returned.",
          "type": [
            "File",
            "Null"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "settings",
            "description": "A settings object to control the function's behavior.",
            "optional": true,
            "type": [
              "Object"
            ]
          },
          {
            "name": "settings.prompt",
            "description": "The prompt text at the top of the file selection dialog. Default: `\"\"` (no prompt)",
            "optional": true,
            "type": [
              "String"
            ]
          },
          {
            "name": "settings.filter",
            "description": "String or an array containing strings of file endings to include in the dialog. Default: `\"\"` (include all)",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "settings.folder",
            "description": "Folder or a folder path string defining the start location of the dialog. Default: most recent dialog folder or main user folder.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Opens a selection dialog that allows to select one file. The settings object can be used to add a prompt text at the top of the dialog, to restrict the selection to certain file types and to set the dialog's starting folder."
          }
        ],
        "examples": [
          {
            "description": "Open file selection dialog with a prompt text",
            "code": "selectFile({prompt: \"Please select a file.\"});"
          },
          {
            "description": "Open selection dialog starting at the user's desktop, allowing to only select PNG or JPEG files",
            "code": "selectFile({folder: \"~/Desktop/\", filter: [\"jpeg\", \"jpg\", \"png\"]});"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "selectFile([settings])"
      },
      {
        "name": "selectFiles",
        "description": "Opens a selection dialog that allows to select one or multiple files. The settings object can be used to add a prompt text at the top of the dialog, to restrict the selection to certain file types and to set the dialog's starting folder.",
        "returns": {
          "name": null,
          "description": "Array of the selected file(s). If the user cancels, an empty array will be returned.",
          "type": [
            "Array"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "settings",
            "description": "A settings object to control the function's behavior.",
            "optional": true,
            "type": [
              "Object"
            ]
          },
          {
            "name": "settings.prompt",
            "description": "The prompt text at the top of the file selection dialog. Default: `\"\"` (no prompt)",
            "optional": true,
            "type": [
              "String"
            ]
          },
          {
            "name": "settings.filter",
            "description": "String or an array containing strings of file endings to include in the dialog. Default: `\"\"` (include all)",
            "optional": true,
            "type": [
              null
            ]
          },
          {
            "name": "settings.folder",
            "description": "Folder or a folder path string defining the start location of the dialog. Default: most recent dialog folder or main user folder.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Opens a selection dialog that allows to select one or multiple files. The settings object can be used to add a prompt text at the top of the dialog, to restrict the selection to certain file types and to set the dialog's starting folder."
          }
        ],
        "examples": [
          {
            "description": "Open file selection dialog with a prompt text",
            "code": "selectFiles({prompt: \"Please select your files.\"});"
          },
          {
            "description": "Open selection dialog starting at the user's desktop, allowing to only select PNG or JPEG files",
            "code": "selectFiles({folder: \"~/Desktop/\", filter: [\"jpeg\", \"jpg\", \"png\"]});"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "selectFiles([settings])"
      },
      {
        "name": "selectFolder",
        "description": "Opens a selection dialog that allows to select a folder. The settings object can be used to add a prompt text at the top of the dialog and to set the dialog's starting folder.",
        "returns": {
          "name": null,
          "description": "The selected folder. If the user cancels, `null` will be returned.",
          "type": [
            "Folder",
            "Null"
          ]
        },
        "category": "Input",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "settings",
            "description": "A settings object to control the function's behavior.",
            "optional": true,
            "type": [
              "Object"
            ]
          },
          {
            "name": "settings.prompt",
            "description": "The prompt text at the top of the folder selection dialog. Default: `\"\"` (no prompt)",
            "optional": true,
            "type": [
              "String"
            ]
          },
          {
            "name": "settings.folder",
            "description": "Folder or a folder path string defining the start location of the dialog. Default: most recent dialog folder or main user folder.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Opens a selection dialog that allows to select a folder. The settings object can be used to add a prompt text at the top of the dialog and to set the dialog's starting folder."
          }
        ],
        "examples": [
          {
            "description": "Open folder selection dialog with a prompt text",
            "code": "selectFolder({prompt: \"Please select a folder.\"});"
          },
          {
            "description": "Open folder selection dialog starting at the user's desktop",
            "code": "selectFolder({folder: \"~/Desktop/\"});"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "selectFolder([settings])"
      },
      {
        "name": "day",
        "description": "The `day()` function returns the current day as a value from `1`-`31`.",
        "returns": {
          "name": null,
          "description": "The current day number.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `day()` function returns the current day as a value from `1`-`31`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "day()"
      },
      {
        "name": "hour",
        "description": "The `hour()` function returns the current hour as a value from `0` - `23`.",
        "returns": {
          "name": null,
          "description": "The current hour.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `hour()` function returns the current hour as a value from `0` - `23`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "hour()"
      },
      {
        "name": "millis",
        "description": "Returns the number of milliseconds (thousandths of a second) since starting the script.",
        "returns": {
          "name": null,
          "description": "The current milli.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Returns the number of milliseconds (thousandths of a second) since starting the script."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "millis()"
      },
      {
        "name": "millisecond",
        "description": "The `millisecond()` function differs from `millis()`, in that it returns the exact millisecond (thousandths of a second) of the current time.",
        "returns": {
          "name": null,
          "description": "The current millisecond.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `millisecond()` function differs from `millis()`, in that it returns the exact millisecond (thousandths of a second) of the current time."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "millisecond()"
      },
      {
        "name": "minute",
        "description": "The `minute()` function returns the current minute as a value from `0` - `59`.",
        "returns": {
          "name": null,
          "description": "The current minute.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `minute()` function returns the current minute as a value from `0` - `59`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "minute()"
      },
      {
        "name": "month",
        "description": "The `month()` function returns the current month as a value from `1`-`12`.",
        "returns": {
          "name": null,
          "description": "The current month number.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `month()` function returns the current month as a value from `1`-`12`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "month()"
      },
      {
        "name": "second",
        "description": "The `second()` function returns the current second as a value from `0` - `59`.",
        "returns": {
          "name": null,
          "description": "The current second.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `second()` function returns the current second as a value from `0` - `59`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "second()"
      },
      {
        "name": "timestamp",
        "description": "The `timestamp()` function returns the current date formatted as `YYYYMMDD_HHMMSS` for useful unique filenaming.",
        "returns": {
          "name": null,
          "description": "The current time in `YYYYMMDD_HHMMSS`.",
          "type": [
            "String"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `timestamp()` function returns the current date formatted as `YYYYMMDD_HHMMSS` for useful unique filenaming."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "timestamp()"
      },
      {
        "name": "weekday",
        "description": "The `weekday()` function returns the current weekday as a string from `Sunday`, `Monday`, `Tuesday` ...",
        "returns": {
          "name": null,
          "description": "The current weekday name.",
          "type": [
            "String"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `weekday()` function returns the current weekday as a string from `Sunday`, `Monday`, `Tuesday` ..."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "weekday()"
      },
      {
        "name": "year",
        "description": "The `year()` function returns the current year as a number (`2018`, `2019` etc).",
        "returns": {
          "name": null,
          "description": "The current year.",
          "type": [
            "Number"
          ]
        },
        "category": "Input",
        "subcategory": "Time & Date",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `year()` function returns the current year as a number (`2018`, `2019` etc)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "year()"
      }
    ],
    "cat": "Input"
  },
  {
    "entries": [
      {
        "name": "print",
        "description": "Prints a message to the console output in the ExtendScript editor, but unlike `println()` it doesn't return the carriage to a new line at the end.",
        "returns": null,
        "category": "Output",
        "subcategory": "Console",
        "parameters": [
          {
            "name": "msg",
            "description": "Any combination of Number, String, Object, Boolean, Array to print.",
            "optional": false,
            "type": [
              "Any"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Prints a message to the console output in the ExtendScript editor, but unlike `println()` it doesn't return the carriage to a new line at the end."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "print(msg)"
      },
      {
        "name": "println",
        "description": "Prints a message line to the console output in the ExtendScript editor.",
        "returns": null,
        "category": "Output",
        "subcategory": "Console",
        "parameters": [
          {
            "name": "msg",
            "description": "Any combination of Number, String, Object, Boolean, Array to print.",
            "optional": false,
            "type": [
              "Any"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Prints a message line to the console output in the ExtendScript editor."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "println(msg)"
      },
      {
        "name": "savePDF",
        "description": "Exports the current document as PDF to the documents folder. Please note that export options default to the last used export settings.",
        "returns": {
          "name": null,
          "description": "The exported PDF file.",
          "type": [
            "File"
          ]
        },
        "category": "Output",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance.",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "showOptions",
            "description": "Whether to show the export dialog.",
            "optional": true,
            "type": [
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Exports the current document as PDF to the documents folder. Please note that export options default to the last used export settings."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "savePDF(file, [showOptions])"
      },
      {
        "name": "savePNG",
        "description": "Exports the current document as PNG (or sequence of PNG files) to the documents folder. Please note, that export options default to the last used export settings.",
        "returns": {
          "name": null,
          "description": "The exported PNG file.",
          "type": [
            "File"
          ]
        },
        "category": "Output",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "showOptions",
            "description": "Whether to show the export dialog",
            "optional": true,
            "type": [
              "Boolean"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Exports the current document as PNG (or sequence of PNG files) to the documents folder. Please note, that export options default to the last used export settings."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "savePNG(file, [showOptions])"
      },
      {
        "name": "saveString",
        "description": "Writes a string to a file. If the given file exists it gets overridden.",
        "returns": {
          "name": null,
          "description": "The file the string was written to.",
          "type": [
            "File"
          ]
        },
        "category": "Output",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance.",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "string",
            "description": "The string to be written.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Writes a string to a file. If the given file exists it gets overridden."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "saveString(file, string)"
      },
      {
        "name": "saveStrings",
        "description": "Writes an array of strings to a file, one line per string. If the given file exists it gets overridden.",
        "returns": {
          "name": null,
          "description": "The file the strings were written to.",
          "type": [
            "File"
          ]
        },
        "category": "Output",
        "subcategory": "Files",
        "parameters": [
          {
            "name": "file",
            "description": "The file name or a File instance",
            "optional": false,
            "type": [
              "String",
              "File"
            ]
          },
          {
            "name": "strings",
            "description": "The string array to be written",
            "optional": false,
            "type": [
              "Array"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Writes an array of strings to a file, one line per string. If the given file exists it gets overridden."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "saveStrings(file, strings)"
      }
    ],
    "cat": "Output"
  },
  {
    "entries": [
      {
        "name": "ellipseMode",
        "description": "The origin of new ellipses is modified by the `ellipseMode()` function. The default configuration is `ellipseMode(CENTER)`, which specifies the location of the ellipse as the center of the shape. The `RADIUS` mode is the same, but the `w` and `h` parameters to `ellipse()` specify the radius of the ellipse, rather than the diameter. The `CORNER` mode draws the shape from the upper-left corner of its bounding box. The `CORNERS` mode uses the four parameters to `ellipse()` to set two opposing corners of the ellipse's bounding box.",
        "returns": null,
        "category": "Shape",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "mode",
            "description": "The ellipse mode to switch to: either `CENTER`, `RADIUS`, `CORNER`, or `CORNERS`.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The origin of new ellipses is modified by the `ellipseMode()` function. The default configuration is `ellipseMode(CENTER)`, which specifies the location of the ellipse as the center of the shape. The `RADIUS` mode is the same, but the `w` and `h` parameters to `ellipse()` specify the radius of the ellipse, rather than the diameter. The `CORNER` mode draws the shape from the upper-left corner of its bounding box. The `CORNERS` mode uses the four parameters to `ellipse()` to set two opposing corners of the ellipse's bounding box."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "ellipseMode(mode)"
      },
      {
        "name": "rectMode",
        "description": "Modifies the location from which rectangles or text frames draw. The default mode is `rectMode(CORNER)`, which specifies the location to be the upper left corner of the shape and uses the `w` and `h` parameters to specify the width and height. The syntax `rectMode(CORNERS)` uses the `x` and `y` parameters of `rect()` or `text()` to set the location of one corner and uses the `w` and `h` parameters to set the opposite corner. The syntax `rectMode(CENTER)` draws the shape from its center point and uses the `w` and `h` parameters to specify the shape's width and height. The syntax `rectMode(RADIUS)` draws the shape from its center point and uses the `w` and `h` parameters to specify half of the shape's width and height.",
        "returns": null,
        "category": "Shape",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "mode",
            "description": "The rectMode to switch to: either `CORNER`, `CORNERS`, `CENTER`, or `RADIUS`.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Modifies the location from which rectangles or text frames draw. The default mode is `rectMode(CORNER)`, which specifies the location to be the upper left corner of the shape and uses the `w` and `h` parameters to specify the width and height. The syntax `rectMode(CORNERS)` uses the `x` and `y` parameters of `rect()` or `text()` to set the location of one corner and uses the `w` and `h` parameters to set the opposite corner. The syntax `rectMode(CENTER)` draws the shape from its center point and uses the `w` and `h` parameters to specify the shape's width and height. The syntax `rectMode(RADIUS)` draws the shape from its center point and uses the `w` and `h` parameters to specify half of the shape's width and height."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "rectMode(mode)"
      },
      {
        "name": "strokeWeight",
        "description": "Sets the width of the stroke used for lines and the border around shapes.",
        "returns": null,
        "category": "Shape",
        "subcategory": "Attributes",
        "parameters": [
          {
            "name": "weight",
            "description": "The width of the stroke in points.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Sets the width of the stroke used for lines and the border around shapes."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "strokeWeight(weight)"
      },
      {
        "name": "arc",
        "description": "The `arc()` function draws an arc. Arcs are drawn along the outer edge of an ellipse defined by the `x`, `y`, `width` and `height` parameters. The origin or the arc's ellipse may be changed with the `ellipseMode()` function. The start and stop parameters specify the angles at which to draw the arc.",
        "returns": {
          "name": null,
          "description": "The resulting GraphicLine or Polygon object (in InDesign Scripting terms the corresponding type is GraphicLine or Polygon, not Arc).",
          "type": [
            "GraphicLine",
            "Polygon"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "cx",
            "description": "X-coordinate of the arc's center.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "cy",
            "description": "Y-coordinate of the arc's center.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "Width of the arc's ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "Height of the arc's ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "startAngle",
            "description": "Starting angle of the arc in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "endAngle",
            "description": "Ending angle of the arc in radians.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "mode",
            "description": "Mode to define the rendering technique of the arc: `OPEN` (default), `CHORD`, or `PIE`.",
            "optional": true,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `arc()` function draws an arc. Arcs are drawn along the outer edge of an ellipse defined by the `x`, `y`, `width` and `height` parameters. The origin or the arc's ellipse may be changed with the `ellipseMode()` function. The start and stop parameters specify the angles at which to draw the arc."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "arc(cx, cy, w, h, startAngle, endAngle, [mode])"
      },
      {
        "name": "ellipse",
        "description": "Draws an ellipse (oval) in the display window. An ellipse with an equal width and height is a circle. The first two parameters set the location, the third sets the width, and the fourth sets the height. If no height is specified, the value of width is used for both the width and height. If a negative height or width is specified, the absolute value is taken. The origin may be changed with the ellipseMode() function.",
        "returns": {
          "name": null,
          "description": "New Oval (in InDesign Scripting terms the corresponding type is Oval, not Ellipse).",
          "type": [
            "Oval"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "Width of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "Height of the ellipse.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Draws an ellipse (oval) in the display window. An ellipse with an equal width and height is a circle. The first two parameters set the location, the third sets the width, and the fourth sets the height. If no height is specified, the value of width is used for both the width and height. If a negative height or width is specified, the absolute value is taken. The origin may be changed with the ellipseMode() function."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "ellipse(x, y, w, h)"
      },
      {
        "name": "line",
        "description": "Draws a line (a direct path between two points) to the page.",
        "returns": {
          "name": null,
          "description": "New GraphicLine.",
          "type": [
            "GraphicLine"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x1",
            "description": "X-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y1",
            "description": "Y-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x2",
            "description": "X-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y2",
            "description": "Y-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Draws a line (a direct path between two points) to the page."
          }
        ],
        "examples": [
          {
            "description": null,
            "code": "var vec1 = new Vector(x1, y1);\nvar vec2 = new Vector(x2, y2);\nline( vec1, vec2 );"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "line(x1, y1, x2, y2)"
      },
      {
        "name": "point",
        "description": "Draws a point, a coordinate in space at the dimension of the current stroke weight. The first parameter is the horizontal value for the point, the second value is the vertical value for the point. The color of the point is determined by the current stroke.",
        "returns": {
          "name": null,
          "description": "The point as an Oval object.",
          "type": [
            "Oval"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the point.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the point.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Draws a point, a coordinate in space at the dimension of the current stroke weight. The first parameter is the horizontal value for the point, the second value is the vertical value for the point. The color of the point is determined by the current stroke."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "point(x, y)"
      },
      {
        "name": "quad",
        "description": "Draws a quad to the page. A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (`x1`, `y1`) sets the first vertex, the subsequent pairs proceed around the defined shape.",
        "returns": {
          "name": null,
          "description": "The new quad as a Polygon object.",
          "type": [
            "Polygon"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x1",
            "description": "X-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y1",
            "description": "Y-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x2",
            "description": "X-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y2",
            "description": "Y-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x3",
            "description": "X-coordinate of Point 3.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y3",
            "description": "Y-coordinate of Point 3.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x3",
            "description": "X-coordinate of Point 4.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y3",
            "description": "Y-coordinate of Point 4.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Draws a quad to the page. A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (`x1`, `y1`) sets the first vertex, the subsequent pairs proceed around the defined shape."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "quad(x1, y1, x2, y2, x3, y3, x3, y3)"
      },
      {
        "name": "rect",
        "description": "Draws a rectangle on the page.\nBy default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the `rectMode()` function.\nThe fifth, sixth, seventh and eighth parameters, if specified, determine corner radius for the top-right, top-left, lower-right and lower-left corners, respectively. If only a fifth parameter is provided, all corners will be set to this radius.",
        "returns": {
          "name": null,
          "description": "The rectangle that was created.",
          "type": [
            "Rectangle"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "w",
            "description": "Width of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "h",
            "description": "Height of the rectangle.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "tl",
            "description": "Radius of top left corner or radius of all 4 corners (optional).",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "tr",
            "description": "Radius of top right corner (optional).",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "br",
            "description": "Radius of bottom right corner (optional).",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "bl",
            "description": "Radius of bottom left corner (optional).",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Draws a rectangle on the page.\nBy default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the `rectMode()` function.\nThe fifth, sixth, seventh and eighth parameters, if specified, determine corner radius for the top-right, top-left, lower-right and lower-left corners, respectively. If only a fifth parameter is provided, all corners will be set to this radius."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "rect(x, y, w, h, [tl], [tr], [br], [bl])"
      },
      {
        "name": "triangle",
        "description": "Draws a triangle to the page. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.",
        "returns": {
          "name": null,
          "description": "The new triangle as a Polygon object.",
          "type": [
            "Polygon"
          ]
        },
        "category": "Shape",
        "subcategory": "Primitives",
        "parameters": [
          {
            "name": "x1",
            "description": "X-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y1",
            "description": "Y-coordinate of Point 1.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x2",
            "description": "X-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y2",
            "description": "Y-coordinate of Point 2.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "x3",
            "description": "X-coordinate of Point 3.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y3",
            "description": "Y-coordinate of Point 3.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Draws a triangle to the page. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "triangle(x1, y1, x2, y2, x3, y3)"
      },
      {
        "name": "addPath",
        "description": "`addPath()` is used to create multi component paths. Call `addPath()` to add the vertices drawn so far to a single path. New vertices will then end up in a new path and `endShape()` will return a multi path object. All component paths will account for the setting (see `CLOSE`) given in `beginShape(shapeMode)`.",
        "returns": null,
        "category": "Shape",
        "subcategory": "Vertex",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "`addPath()` is used to create multi component paths. Call `addPath()` to add the vertices drawn so far to a single path. New vertices will then end up in a new path and `endShape()` will return a multi path object. All component paths will account for the setting (see `CLOSE`) given in `beginShape(shapeMode)`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "addPath()"
      },
      {
        "name": "beginShape",
        "description": "Using the `beginShape()` and `endShape()` functions allows to create more complex forms. `beginShape()` begins recording vertices for a shape and `endShape()` stops recording. After calling the `beginShape()` function, a series of `vertex()` commands must follow. To stop drawing the shape, call `endShape()`.",
        "returns": null,
        "category": "Shape",
        "subcategory": "Vertex",
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Using the `beginShape()` and `endShape()` functions allows to create more complex forms. `beginShape()` begins recording vertices for a shape and `endShape()` stops recording. After calling the `beginShape()` function, a series of `vertex()` commands must follow. To stop drawing the shape, call `endShape()`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "beginShape()"
      },
      {
        "name": "endShape",
        "description": "The `endShape()` function is the companion to `beginShape()` and may only be called after `beginShape()`. It creates and returns a path of the previously called `vertex()` points. The `shapeMode` parameter allows to close the shape (to connect the beginning and the end).",
        "returns": {
          "name": null,
          "description": "The GraphicLine or Polygon object that was created.",
          "type": [
            "GraphicLine",
            "Polygon"
          ]
        },
        "category": "Shape",
        "subcategory": "Vertex",
        "parameters": [
          {
            "name": "shapeMode",
            "description": "Set to `CLOSE` if the new path should be auto-closed.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "The `endShape()` function is the companion to `beginShape()` and may only be called after `beginShape()`. It creates and returns a path of the previously called `vertex()` points. The `shapeMode` parameter allows to close the shape (to connect the beginning and the end)."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "endShape(shapeMode)"
      },
      {
        "name": "vertex",
        "description": "Shapes are constructed by connecting a series of vertices. `vertex()` is used to specify the vertex coordinates of lines and polygons. It is used exclusively between the `beginShape()` and `endShape()` functions.\n\nUse either `vertex(x, y)` for drawing straight corners or `vertex(x, y, xLeftHandle, yLeftHandle, xRightHandle, yRightHandle)` for drawing bezier shapes. You can also mix the two approaches.",
        "returns": null,
        "category": "Shape",
        "subcategory": "Vertex",
        "parameters": [
          {
            "name": "x",
            "description": "X-coordinate of the vertex.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "y",
            "description": "Y-coordinate of the vertex.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "xLeftHandle",
            "description": "X-coordinate of the left-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "yLeftHandle",
            "description": "Y-coordinate of the left-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "xRightHandle",
            "description": "X-coordinate of the right-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          },
          {
            "name": "yRightHandle",
            "description": "Y-coordinate of the right-direction point.",
            "optional": true,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Shapes are constructed by connecting a series of vertices. `vertex()` is used to specify the vertex coordinates of lines and polygons. It is used exclusively between the `beginShape()` and `endShape()` functions.\n\nUse either `vertex(x, y)` for drawing straight corners or `vertex(x, y, xLeftHandle, yLeftHandle, xRightHandle, yRightHandle)` for drawing bezier shapes. You can also mix the two approaches."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "vertex(x, y, [xLeftHandle], [yLeftHandle], [xRightHandle], [yRightHandle])"
      }
    ],
    "cat": "Shape"
  },
  {
    "entries": [
      {
        "name": "mode",
        "description": "Used to set the performance mode. While modes can be switched during script execution, to use a mode for the entire script execution, `mode()` should be placed in the beginning of the script. In basil there are three different performance modes:\n\n- `VISIBLE` is the default mode. In this mode, during script execution the document will be processed with screen redraw, allowing to see direct results during the process. As the screen needs to redraw continuously, this is slower than the other modes.\n- `HIDDEN` allows to process the document in background mode. The document is not visible in this mode, which speeds up the script execution. In this mode you will likely look at InDesign with no open document for quite some time – do not work in InDesign during this time. You may want to use `println(\"yourMessage\")` in your script and look at the console to get information about the process. Note: In order to enter this mode either a saved document needs to be open or no document at all. If you have an unsaved document open, basil will automatically save it for you. If it has not been saved before, you will be prompted to save it to your hard drive.\n- `SILENT` processes the document without redrawing the screen. The document will stay visible and only update once the script is finished or once the mode is changed back to `VISIBLE`.",
        "returns": null,
        "category": "Structure",
        "subcategory": null,
        "parameters": [
          {
            "name": "mode",
            "description": "The performance mode to switch to.",
            "optional": false,
            "type": [
              "String"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Used to set the performance mode. While modes can be switched during script execution, to use a mode for the entire script execution, `mode()` should be placed in the beginning of the script. In basil there are three different performance modes:\n\n- `VISIBLE` is the default mode. In this mode, during script execution the document will be processed with screen redraw, allowing to see direct results during the process. As the screen needs to redraw continuously, this is slower than the other modes.\n- `HIDDEN` allows to process the document in background mode. The document is not visible in this mode, which speeds up the script execution. In this mode you will likely look at InDesign with no open document for quite some time – do not work in InDesign during this time. You may want to use `println(\"yourMessage\")` in your script and look at the console to get information about the process. Note: In order to enter this mode either a saved document needs to be open or no document at all. If you have an unsaved document open, basil will automatically save it for you. If it has not been saved before, you will be prompted to save it to your hard drive.\n- `SILENT` processes the document without redrawing the screen. The document will stay visible and only update once the script is finished or once the mode is changed back to `VISIBLE`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "mode(mode)"
      },
      {
        "name": "noLoop",
        "description": "Stops basil from continuously executing the code within `loop()` and quits the script.",
        "returns": null,
        "category": "Structure",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Stops basil from continuously executing the code within `loop()` and quits the script."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "noLoop()"
      }
    ],
    "cat": "Structure"
  },
  {
    "entries": [
      {
        "name": "applyMatrix",
        "description": "Multiplies the current matrix by the one specified through the parameters.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [
          {
            "name": "matrix",
            "description": "The matrix to be applied.",
            "optional": false,
            "type": [
              "Matrix2D"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Multiplies the current matrix by the one specified through the parameters."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "applyMatrix(matrix)"
      },
      {
        "name": "popMatrix",
        "description": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "popMatrix()"
      },
      {
        "name": "printMatrix",
        "description": "Prints the current matrix to the console window.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Prints the current matrix to the console window."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "printMatrix()"
      },
      {
        "name": "pushMatrix",
        "description": "Pushes the current transformation matrix onto the matrix stack. Understanding `pushMatrix()` and `popMatrix()` requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Pushes the current transformation matrix onto the matrix stack. Understanding `pushMatrix()` and `popMatrix()` requires understanding the concept of a matrix stack. The `pushMatrix()` function saves the current coordinate system to the stack and `popMatrix()` restores the prior coordinate system. `pushMatrix()` and `popMatrix()` are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "pushMatrix()"
      },
      {
        "name": "resetMatrix",
        "description": "Replaces the current matrix with the identity matrix.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Replaces the current matrix with the identity matrix."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "resetMatrix()"
      },
      {
        "name": "rotate",
        "description": "Rotates an object the amount specified by the angle parameter. Angles should be specified in radians (values from 0 to `PI`*2) or converted to radians with the `radians()` function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction with 0 radians or degrees being up and `HALF_PI` being to the right etc. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `rotate(PI/2)` and then `rotate(PI/2)` is the same as `rotate(PI)`. If `rotate()` is called within the `draw()`, the transformation is reset when the loop begins again. Technically, `rotate()` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the `pushMatrix()` and `popMatrix()`.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [
          {
            "name": "angle",
            "description": "The angle specified in radians",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Rotates an object the amount specified by the angle parameter. Angles should be specified in radians (values from 0 to `PI`*2) or converted to radians with the `radians()` function. Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction with 0 radians or degrees being up and `HALF_PI` being to the right etc. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `rotate(PI/2)` and then `rotate(PI/2)` is the same as `rotate(PI)`. If `rotate()` is called within the `draw()`, the transformation is reset when the loop begins again. Technically, `rotate()` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the `pushMatrix()` and `popMatrix()`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "rotate(angle)"
      },
      {
        "name": "scale",
        "description": "Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call `scale(2.0)` increases the dimension of a shape by 200%. Objects always scale from their relative origin to the coordinate system. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `scale(2.0)` and then `scale(1.5)` is the same as `scale(3.0)`. If `scale()` is called within `draw()`, the transformation is reset when the loop begins again. This function can be further controlled by `pushMatrix()` and `popMatrix()`. If only one parameter is given, it is applied on X and Y axis.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [
          {
            "name": "scaleX",
            "description": "The amount to scale the X axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "scaleY",
            "description": "The amount to scale the Y axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call `scale(2.0)` increases the dimension of a shape by 200%. Objects always scale from their relative origin to the coordinate system. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `scale(2.0)` and then `scale(1.5)` is the same as `scale(3.0)`. If `scale()` is called within `draw()`, the transformation is reset when the loop begins again. This function can be further controlled by `pushMatrix()` and `popMatrix()`. If only one parameter is given, it is applied on X and Y axis."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "scale(scaleX, scaleY)"
      },
      {
        "name": "transform",
        "description": "Transforms a given page item. The type of transformation is determinded with the second parameter. The third parameter is the transformation value, either a number or an array of x and y values. The transformation's reference point (top left, bottom center etc.) can be set beforehand by using the `referencePoint()` function. If the third parameter is ommited, the function can be used to measure the value of the page item. There are 10 different transformation types:\n- `\"translate\"`: Translates the page item by the given `[x, y]` values. Returns the coordinates of the page item's anchor point as anray.\n- `\"rotate\"`: Rotates the page item to the given degree value. Returns the page item's rotation value in degrees.\n- `\"scale\"`: Scales the page item to the given `[x, y]` scale factor values. Alternatively, a single scale factor value can be usto scale the page item uniformely. Returns the scale factor values of the page item's current scale as an array.\n- `\"shear\"`: Shears the page item to the given degree value. Returns the page item's shear value in degrees.\n- `\"size\"`: Sets the page item's size to the given `[x, y]` dimensions. Returns the size of the page item as an array.\n- `\"width\"`: Sets the page item's width to the given value. Returns the width of the page item.\n- `\"height\"`: Sets the page item's height to the given value. Returns the height of the page item.\n- `\"position\"`: Sets the position of the page item's anchor point to the given `[x, y]` coordinates. Returns the coordinates of the page item's anchor point as an array.\n- `\"x\"`: Sets the x-position of the page item's anchor point to the given value. Returns the x-coordinate of the page item's anr point.\n- `\"y\"`: Sets the y-position of the page item's anchor point to the given value. Returns the y-coordinate of the page item's anchor point.",
        "returns": {
          "name": null,
          "description": "The current value(s) of the specified transformation.",
          "type": [
            "Number",
            "Array"
          ]
        },
        "category": "Transform",
        "subcategory": null,
        "parameters": [
          {
            "name": "pItem",
            "description": "The page item to transform.",
            "optional": false,
            "type": [
              "PageItem"
            ]
          },
          {
            "name": "type",
            "description": "The type of transformation.",
            "optional": false,
            "type": [
              "String"
            ]
          },
          {
            "name": "value",
            "description": "The value(s) of the transformation.",
            "optional": true,
            "type": [
              null
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Transforms a given page item. The type of transformation is determinded with the second parameter. The third parameter is the transformation value, either a number or an array of x and y values. The transformation's reference point (top left, bottom center etc.) can be set beforehand by using the `referencePoint()` function. If the third parameter is ommited, the function can be used to measure the value of the page item. There are 10 different transformation types:\n- `\"translate\"`: Translates the page item by the given `[x, y]` values. Returns the coordinates of the page item's anchor point as anray.\n- `\"rotate\"`: Rotates the page item to the given degree value. Returns the page item's rotation value in degrees.\n- `\"scale\"`: Scales the page item to the given `[x, y]` scale factor values. Alternatively, a single scale factor value can be usto scale the page item uniformely. Returns the scale factor values of the page item's current scale as an array.\n- `\"shear\"`: Shears the page item to the given degree value. Returns the page item's shear value in degrees.\n- `\"size\"`: Sets the page item's size to the given `[x, y]` dimensions. Returns the size of the page item as an array.\n- `\"width\"`: Sets the page item's width to the given value. Returns the width of the page item.\n- `\"height\"`: Sets the page item's height to the given value. Returns the height of the page item.\n- `\"position\"`: Sets the position of the page item's anchor point to the given `[x, y]` coordinates. Returns the coordinates of the page item's anchor point as an array.\n- `\"x\"`: Sets the x-position of the page item's anchor point to the given value. Returns the x-coordinate of the page item's anr point.\n- `\"y\"`: Sets the y-position of the page item's anchor point to the given value. Returns the y-coordinate of the page item's anchor point."
          }
        ],
        "examples": [
          {
            "description": "Rotating a rectangle to a 25 degrees angle",
            "code": "var r = rect(20, 40, 200, 100);\ntransform(r, \"rotate\", 25);"
          },
          {
            "description": "Measure the width of a rectangle",
            "code": "var r = rect(20, 40, random(100, 300), 100);\nvar w = transform(r, \"width\");\nprintln(w); // prints the rectangle's random width between 100 and 300"
          },
          {
            "description": "Position a rectangle's lower right corner at a certain position",
            "code": "var r = rect(20, 40, random(100, 300), random(50, 150));\nreferencePoint(BOTTOM_RIGHT);\ntransform(r, \"position\", [40, 40]);"
          }
        ],
        "todo": null,
        "summary": null,
        "codetitle": "transform(pItem, type, [value])"
      },
      {
        "name": "translate",
        "description": "Specifies an amount to displace objects within the page. The `x` parameter specifies left/right translation, the `y` parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `translate(50, 0)` and then `translate(20, 0)` is the same as `translate(70, 0)`. This function can be further controlled by the `pushMatrix()` and `popMatrix()`.",
        "returns": null,
        "category": "Transform",
        "subcategory": null,
        "parameters": [
          {
            "name": "tx",
            "description": "The amount of offset on the X axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          },
          {
            "name": "ty",
            "description": "The amount of offset on the Y axis.",
            "optional": false,
            "type": [
              "Number"
            ]
          }
        ],
        "kind": "function",
        "tags": [
          {
            "title": "description",
            "description": "Specifies an amount to displace objects within the page. The `x` parameter specifies left/right translation, the `y` parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling `translate(50, 0)` and then `translate(20, 0)` is the same as `translate(70, 0)`. This function can be further controlled by the `pushMatrix()` and `popMatrix()`."
          }
        ],
        "examples": [],
        "todo": null,
        "summary": null,
        "codetitle": "translate(tx, ty)"
      }
    ],
    "cat": "Transform"
  }
]